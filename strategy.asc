
[[strategy]]
== _Strategy_

ifdef::slides[:leveloffset: -1]

//-------------- book
ifdef::backend-pdf[]
WARNING: Pensez à d'abord réaliser le <<TD-strategy,TD en annexe>>.
endif::backend-pdf[]
//--------------------

=== Principes de conception

//-------------- book
ifdef::backend-pdf[]
Les bons principes de conception qui sont mis en oeuvre dans ce patron sont les suivants.
endif::backend-pdf[]
//--------------------

[NOTE]
.Principe de conception
====
[quote]
____________________________________________________________________
Identifiez les aspects de votre code qui varient et
séparez-les de ceux qui demeurent constant.
____________________________________________________________________
====

ifdef::slides[=== Principes de conception (suite)]

[NOTE]
.Principe de conception
====
[quote]
____________________________________________________________________
Programmer une interface, non une implémentation.
____________________________________________________________________
====

ifdef::slides[=== Principes de conception (suite)]

[NOTE]
.Principe de conception
====
[quote]
____________________________________________________________________
Préférez la composition à l'héritage.
____________________________________________________________________
====

=== Définition du patron

[NOTE]
.Design pattern : *Stratégie* (_Strategy_)
====
include::pattern/strategy.txt[]
====

=== Premier exemple d'utilisation

ifndef::slides[.Premier exemple d'utilisation de patron (1er comportement)]
image::superCanardFinal-a.png[link="images/superCanardFinal-a.png",scaledwidth=70%]

ifndef::slides[.Premier exemple d'utilisation de patron (2ème comportement)]
image::superCanardFinal-b.png[link="images/superCanardFinal-b.png"]

ifndef::slides[.Premier exemple d'utilisation de patron (hiérarchie des classes)]
image::superCanardFinal-c.png[link="images/superCanardFinal-c.png"]

.Question
WARNING: Pourquoi n'a-t'on pas utilisé _Strategy_ pour `afficher()` ou `nager()`?
// réponse : car on considère que tous les canards ont le même comportement pour ces méthodes.

=== Autre exemple concret

NOTE: L'exemple qui suit est tiré de
http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns[ce cours].

*Le problème*

Vous avez une classe `FileWriter` qui a pour rôle d'écrire dans un fichier
ainsi qu'une classe `DBWriter`. Dans un premier temps, ces classes ne
contiennent qu'une méthode `write()` qui n'écrira que le texte passé
en paramètre.

Au fil du temps, vous vous rendez compte que c'est dommage qu'elles ne
fassent que ça et vous aimeriez bien qu'elles puissent écrire en différents
formats (HTML, XML, etc.) : les classes doivent donc formater puis écrire.

ifdef::slides[=== Autre exemple concret (suite)]

*La solution*

ifndef::slides[.Application du pattern <<strategy>> (http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns[source])]
image::strategyWriter.png[link="http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns"]

ifdef::slides[=== Autre exemple concret (suite)]

[NOTE,formater-icon.png]
====
.L'interface en `PHP` (code source link:src/php/Formater.php[ici])
[source,php]
------
include::src/php/Formater.php[]
------
====

ifdef::slides[=== Autre exemple concret (suite)]

[NOTE,formater-icon.png]
====
.La classe abstraite `Writer` (code source link:src/php/Writer.php[ici])
[source,php]
------
include::src/php/Writer.php[]
------
====

ifdef::slides[=== Autre exemple concret (suite)]

[NOTE,filewriter-icon.png]
====
.La classe `FileWriter` (code source link:src/php/FileWriter.php[ici])
[source,php]
------
include::src/php/FileWriter.php[]
------
====

ifdef::slides[=== Autre exemple concret (suite)]

[NOTE,dbwriter-icon.png]
====
.La classe `DBWriter` (code source link:src/php/DBWriter.php[ici])
[source,php]
------
include::src/php/DBWriter.php[]
------
====

ifdef::slides[=== Autre exemple concret (suite)]

Enfin, nous avons nos trois formateurs.
L'un ne fait rien de particulier (`TextFormater`),
et les deux autres formatent le texte en deux langages
différents (`HTMLFormater` et `XMLFormater`).

ifdef::slides[=== Autre exemple concret (suite)]

[NOTE,formaters-icon.png]
====
.La classe `TextFormater` (code source link:src/php/TextFormater.php[ici])
[source,php]
------
include::src/php/TextFormater.php[]
------

ifdef::slides[]
====

=== Autre exemple concret (suite)

[NOTE,formaters-icon.png]
====

endif::slides[]

.La classe `HTMLFormater` (code source link:src/php/HTMLFormater.php[ici])
[source,php]
------
include::src/php/HTMLFormater.php[]
------

ifdef::slides[]
====

=== Autre exemple concret (suite)

[NOTE,formaters-icon.png]
====

endif::slides[]

.La classe `XMLFormater` (code source link:src/php/XMLFormater.php[ici])
[source,php]
------
include::src/php/XMLFormater.php[]
------
====

=== D'autres exemples

[%step]
- La fonction standard `sort()` de python
+
[source,python]
-------------
>>> sorted("This is a test string from Andrew".split(), key=str.lower)
['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']
-------------
+
- Stratégie de cryptage en fonction de la taille d'un fichier
+
[source,java]
-------------
File file = getFile();
 Cipher c = CipherFactory.getCipher( file.size() );
 c.performAction();

// implementations:
interface  Cipher  {
     public void performAction();
}
class InMemoryCipherStrategy implements Cipher {
         public void performAction() {
             // load in byte[] ....
         }
}
class SwaptToDiskCipher implements Cipher {
         public void performAction() {
             // swapt partial results to file.
         }
}
-------------

TIP: Plus de détails http://stackoverflow.com/questions/370258/real-world-example-of-the-strategy-pattern[ici]
