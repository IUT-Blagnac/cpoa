== Point sur le TD de la semaine passée

ifdef::slides[:leveloffset: -1]

=== Principes de conception

NOTE: Pas de nouveau principes de conception particuliers pour le
patron <<singleton>>

=== Patron Singleton

[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Singleton*
====
include::pattern/singleton.txt[]
====

ifdef::slides[=== Patron Singleton]

ifndef::slides[.Quelques exemples de description du patron Singleton]
image::google-singleton.png[link="images/google-singleton.png"]

=== Exemple d'utilisation du patron

//ifndef::slides[.Exemple d'utilisation du patron]
//image::singletonExp.png[link="images/singletonExp.png"]

Quelques exemple de l'utilisation industrielle de <<singleton>> :

- _Thread pools_ (pour contrôler les _threads_)
- Connexions SQL
- Objets de type _Registry_
- Objecs gérant les préférences utilisateur
- Caches
- Les classes _Factory_
- ...

=== Implémentations Java

ifdef::slides[]
Pour résumer les (bonnes) implémentations Java :

- Initialisation directe de la variable instance.
- Initialisation dans un bloc `static`.
- Utilisation d'un `enum` à la place d'une classe.

endif::slides[]

ifdef::slides[:leveloffset: -1]

==== Initialisation directe de la variable instance

[source,java]
--------
    public final class Singleton {
      private final static volatile Singleton instance = new Singleton();
      public final static Singleton getInstance() { return instance; }
      private Singleton() {}
      }
--------

==== Initialisation dans un bloc `static`

[source,java]
--------
public final class Singleton {
        private static volatile Singleton instance = null;
        static {
          instance = new Singleton();
        }
        public final static Singleton getInstance() { return instance; }
        private Singleton() {}
        }
--------

==== Utilisation d'un `enum`

NOTE: On n'a pas vu cette implémentation en TD!

[source,java]
--------
        public enum Singleton {
          SINGLETON;
          public static Singleton getInstance() { return SINGLETON; }
        }
--------

NOTE: Les `enum`, bien connues en C, sont apparues à la version `1.5` de Java!

ifdef::slides[==== Exemple d'utilisation d'un `enum`]

Exemple d'utilisation de ce type d'implémentation

// Merci Vincent

[source,java]
--------
public enum MonSingleton {
  INSTANCE;

  private String attribute = "World";

  public String sayHello() {
    return "Hello " + attribute;
  }
}
--------

Et on l'appelle avec :

[source,java]
--------
MonSingleton.INSTANCE.sayHello();
--------

ifdef::slides[==== Pourquoi un `enum` ?]

Intérêts/Limites d'utiliser un `enum` :

- les enumérations classiques sont _thread-safe_ car elles sont
initialisées par le _classloader_
- on ne peut pas utiliser l'héritage

ifndef::slides[]
TIP: Pour aller plus loin, cf/ http://blog.zenika.com/index.php?post/2014/06/11/Quelques-patterns-d-implementation-avec-les-enums-java[ce site].
endif::slides[]

ifdef::slides[:leveloffset: +1]
