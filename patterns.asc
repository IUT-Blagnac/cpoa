// ------------------------------------------
//  Created by Jean-Michel Bruel on 2014-11.
//  Copyright (c) 2014 IRIT/U. Toulouse. All rights reserved.
// ------------------------------------------
= Design patterns
Jean-Michel Bruel (@jmbruel, jbruel@gmail.com)
v1.0, {localdate} - First draft
:experimental:
:numbered!:
:deckjs_theme: swiss
:status: bottom

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

:pattern-list:

== Introduction : importance des patrons

== Point sur le TD de la semaine passée

ifdef::slides[:leveloffset: -1]

=== Principes de conception

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
Identifiez les apsects de votre code qui varient et
séparez-les de ceux qui demeurent constant.
====

ifdef::slides[=== Principes de conception (suite)]

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
Programmer une interface, non une implémentation.
====

ifdef::slides[=== Principes de conception (suite)]

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
Préférez la composition à l'héritage.
====

=== Premier patron

[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Stratégie* (_Strategy_)
====
include::pattern/strategy.txt[]
====

=== Premier exemple d'utilisation de patron

ifndef::slides[.Premier exemple d'utilisation de patron]
image::superCanardFinal.png[link="images/superCanardFinal.png"]

ifdef::slides[:leveloffset: +1]

== Un peu d'histoire

1987::
  *Beck* et *Cunningham* : patterns pour des interfaces utilisateurs
1994::
  *Gamma*, Helm, Johnson et Vlissides : LE livre de référence (cf. <<GoF>>)
  NOTE:  Les patterns de ce livre sont connus comme les *Gof* pour « _Gang of Four_ ».
??::
  *Craig Larman* décrit des modèles de conception : les Patterns *GRASP*

== Exemples de bons principes

*SOLID*:

- _**S**ingle Responsibility Principle_
- _**O**pen-Closed Principle_
- _**L**iskov Substitution Principle_
- _**I**nterface Segregation Principle_
- _**D**ependency Inversion Principle_

ifdef::slides[:leveloffset: -1]

=== _**S**ingle Responsibility Principle_

image::solid-s.jpg[]

.......
Responsabilité => Sujet à changement
.......

=== _**O**pen-Closed Principle_

image::solid-o.jpg[]

.......
Ouvert à l'extension mais fermé à la modification
.......

=== _**L**iskov Substitution Principle_

image::solid-l.jpg[]

.......
Une classe doit pouvoir être remplacée par une instance d'un de ses
sous-types, sans modifier la cohérence du programme
.......

=== _**I**nterface Segregation Principle_

image::solid-i.jpg[]

.......
Préférer plusieurs interfaces spécifiques pour chaque client plutôt qu'une
seule interface générale
.......

=== _**D**ependency Inversion Principle_

image::solid-d.jpg[]

.......
Il faut dépendre des abstractions, pas des implémentations
.......

ifdef::slides[:leveloffset: +1]

== GRASP


== Patrons à aborder

[%step]
* Ceux déjà pratiqués
** <<Singleton>>
** <<Observateur>>
** Fabrique (_factory_) (cf. parser sax)
* Les "pressentis"
- <<Stratégie>>
- Itérateur
- Composite
- Etat
- Proxy
* Les nouveaux
- Décorateur
- Commande
- Adaptateur
- Façade
- Patron de méthode
* Les "avancés"
- Chaînes de responsabilité
- Visiteur
* Ceux qu'on n'aura pas le temps d'aborder
- Prototype
- Mémento
- Médiateur
- Interprète
- Poids-mouche
- Monteur
- Pont
* Concepts avancés
- Patrons de patrons (exemple du MVC)
- Anti-patrons

[appendix]
:numbered!:
include::glossaire.txt[]

include::refs.txt[]

== Crédits photos

- http://lostechies.com/derickbailey/2009/02/11/solid-development-principles-in-motivational-pictures/
