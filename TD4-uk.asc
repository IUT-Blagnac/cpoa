:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TD 5

:eleve:
:sourcedir: src/java/TD3

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault} - (Semaine 48)
:lang: fr
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://iut-blagnac.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Duration
:depot: Expected outputs
:lien: Link
:img: img
:principe: Design Good Principle
:allerPlusLoin: To go further...
:about: About...

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version with answers image:icons/solution.png[]
=====
This version includes answers to most of the questions.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10a",width="90%"]
|======================
| {pre}		|
. I can program in {java}.
. I've understood that I need to think a little bit before running into code.
. I have practiced some design patterns.
| {objtd}	| Work on some UML subtilities*.
| {duree}	| *1* TD
|======================

ifndef::compact[]

== Reminder

TIP: Don't hesitate to read regularly the "{sitecours}".

endif::compact[]

== Differences between dependancy, association, composition, agregation

Consider the following partial {uml} class diagram (sorry for the French):

.Diagramme de classe partiel
image::assoc1.png[]

//----------------------------- Question ------------------
.*icon:graduation-cap[] QUESTION*
[WARNING]
====
Complete this diagram by adding the missing relations (dependancies,
associations, compositions, agregations).
====

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
.Solution image:icons/solution.png[]
[CAUTION]
========
.Class diagram with relations
image::assoc1-cor.png[]
========
endif::prof[]

== Patterns

//----------------------------- Question ------------------
.*icon:graduation-cap[] QUESTION*
[WARNING]
====
For each of these (partial) class diagram (representing
design patterns you know), complete:

- the name of the pattern in the caption,
- add the missing relations.

.Pattern ...
image::fabrique-c.png[]

.Pattern ...
image::etat-c.png[]

.Patron ...
image::observateur-c.png[]

.Patron ...
image::strategy-c.png[]
====

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
.Solution image:icons/solution.png[]
[CAUTION]
========
.Patron Fabrique (simple)
image::fabrique.png[]

[NOTE]
====
Notez l'équivalence {UML} (ici noté en {plantUML}) entre :

- `+Produit "+produit" <- Createur+`
- `+Produit "1" <- Createur {+Produit produit;}+`
====

.Patron Etat
image::etat.png[]

.Patron Observateur
image::observateur.png[]

.Patron Strategy
image::strategy.png[]
========
endif::prof[]

== State machines

//----------------------------- Question ------------------
.*icon:graduation-cap[] QUESTION*
[WARNING]
====
. Create a state diagram modeling a chess game party.
. Create a state diagram modeling the behavior of a classical crossing light
(in France, 3 lights) classiques.
. Add the `panne` mode (blinking orange).
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
.Solution image:icons/solution.png[]
[CAUTION]
========
. Chess
+
.Diagramme d'état d'une partie d'échec
image::echec.png[]
+
. Light
+
.Diagramme d'état d'un feu tricolore classique
image::feu1.png[]
+
.Diagramme d'état d'un feu tricolore avec panne
image::feu2.png[]

========
endif::prof[]

== Sequence diagram

You have to document, from the following extracts of {java} code,
the `ApplicationBanque` application, seen in S2.

NOTE: You will refactor thsi application in TP, the goal here is
not to correct for now the design problems but to identify them.

.Statique method `comptesDUnPropretaire` (`ApplicationAgenceBancaire.java`)
[source,java]
-------
public static void comptesDUnPropretaire (AgenceBancaire ag, String nomProprietaire) {
	Compte []  t;

	t = ag.getComptesDe(nomProprietaire);
	if (t.length == 0) {
		System.out.println("pas de compte à ce nom ...");
	} else {
		System.out.println("  " + t.length + " comptes pour " + nomProprietaire);
		for (int i=0; i<t.length; i++)
		t[i].afficher();
	}
}
-------

//----------------------------- Question ------------------
.*icon:graduation-cap[] QUESTION*
[WARNING]
====
Define a sequence diagram illustrating the behavior of this method.
====

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
.Solution image:icons/solution.png[]
[CAUTION]
========
.Diagramme de séquence de la méthode `comptesDUnPropretaire`
image::banque-seq-methode.png[]
========
endif::prof[]

.`ApplicationAgenceBancaire.java`
[source,java]
-------
public class ApplicationAgenceBancaire {

	public static void main(String argv[]) {

		String choix;

		boolean continuer ;
		Scanner lect;
		AgenceBancaire monAg ;

		String nom, numero;
		Compte c;
		double montant;

		lect = new Scanner ( System.in );
		lect.useLocale(Locale.US);

		monAg = AccesAgenceBancaire.getAgenceBancaire();

		continuer = true;
		while (continuer) {
			...
			choix = lect.next();
			choix = choix.toLowerCase();
			switch (choix) {
				case "q" :
				System.out.println("ByeBye");
				continuer = false;
				break;
				case "l" :
				monAg.afficher();
				break;
				case "v" :
				System.out.print("Num compte -> ");
				numero = lect.next();
				c = monAg.getCompte(numero);
				if (c==null) {
					System.out.println("Compte inexistant ...");
				} else {
					c.afficher();
				}
				break;
				case "p" :
				System.out.print("Propriétaire -> ");
				nom = lect.next();
				ApplicationAgenceBancaire.comptesDUnPropretaire (monAg, nom);
				break;
				case "d" :
				...
				break;
				case "r" :
				...
				break;
				default :
				...
				break;
			}
		}
	}

	public static void comptesDUnPropretaire (AgenceBancaire ag,
		String nomProprietaire) {...}

	public static void deposerSurUnCompte (AgenceBancaire ag,
		String numeroCompte, double montant) {...}

	public static void retirerSurUnCompte (AgenceBancaire ag,
		String numeroCompte, double montant) {...}
}
-------

.Extract of `AccesAgenceBancaire`
[source,java]
------
public class AccesAgenceBancaire {

	private AccesAgenceBancaire () {}
	public static AgenceBancaire getAgenceBancaire () {

		AgenceBancaire ag = new AgenceBancaire("CAISSE ECUREUIL", "PIBRAC");
		...
	}
...
}
------
//----------------------------- Question ------------------
.*icon:graduation-cap[] QUESTION*
[WARNING]
====
. Realize the class diagram of the application
. Does the `AccesAgenceBancaire` class reminds you something?
. Realize a sequence diagram illustrating the behavior of this
application (`main`). You can use "ref" blocks for the calls
to static methods, and don't care about scanners.
====

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
.Solution image:icons/solution.png[]
[CAUTION]
========
. Diagramme de classe
+
.Diagramme de classe
image::banque.png[]
+
NOTE: Les étudiants ne peuvent avoir tous ces détails, mais ça leur
servira pour le TP.
+
. C'est un singleton
. Diagramme de séquence
+
.Diagramme de séquence de `ApplicationAgenceBancaire`
image::banque-seq.png[]
========
endif::prof[]

:numbered!:
== Pour aller plus loin

//----------------------------- Question ------------------
.*icon:graduation-cap[] QUESTION*
[WARNING]
====
. Is it possible, in a {java} code, to make the difference between
agregation `+1 <>-> *+` and association `+1 -> *+`?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
.Solution image:icons/solution.png[]
[CAUTION]
========
. Yes, but it requires to find out that, for each method call
on the "whole" class, those calls are systematically forwardedon the
"parts". Ain't easy to find.
========
endif::prof[]


ifndef::compact[]
== About...

****************************************************************
Realized via  {asciidoctorlink} (version `{asciidoctor-version}`) from 'Dan Allen', based on {asciidoc}.
Free to use on 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
