:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TD 2

:eleve:
:prof:
:sourcedir: src/java/TD2

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://iut-blagnac.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1. Je sais programmer en {java}.
2. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
3. Je maîtrise les concepts objet de base (héritage, polymorphisme, ...).
4. J'ai compris ce qu'est un patron et j'ai grand soif d'en apprendre d'autres que
_Strategy_
| {objtd}	| Aborder les patrons *singleton* et *fabrique*.
| {duree}	| *1* TD et *2* TP de 1,5h (sur 2 semaines).
|======================

// // | {depot}	| -

== Rappel du cours

TIP: N'hésitez pas à (re)lire régulièrement le {sitecours}.

Dans ce TD nous allons travailler autour des patrons <<Singleton,Singleton>> et <<Fabrique,Fabrique>>.

== La fabrique de chocolat

Vous participez au développement d'un simulateur de fabriques
de chocolat modernes dont des bouilleurs sont assistés par ordinateur.

La tâche du bouilleur consiste à contenir un mélange de chocolat et de lait,
à le porter à ébullition puis à le transmettre à la phase suivante où il est
transformé en plaquettes de chocolat.

=== Problème initial

Voici la classe contrôleur du bouilleur industriel de _Bonchoco, SA_.

.Contrôleur du bouilleur en Java
[source,java]
------
include::{sourcedir}/Chocolat/src/BouilleurChocolat.java[]
------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. À quoi servent les attributs `vide` et `bouilli`?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Si vous étudiez le code, vous constatez qu'ils ont essayé très soigneusement d'éviter
les catastrophes, par exemple de vider deux mille litres de mélange qui n'a pas bouilli,
de remplir un bouilleur déjà plein ou de faire bouillir un bouilleur vide !
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

Vous faîtes un cauchemar horrible (quoi que) où vous vous noyez dans du chocolat.
Vous vous réveillez en sursaut avec une crainte terrible.


//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. Que pourrait-il se passer avec plusieurs instances de contrôleurs?
. De quoi faudrait-il s'assurer pour éviter ce problème?
. Trouvez des exemples de situations où il est important de n'avoir
qu'une seule instance d'une classe donnée?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
. Que l'un remplisse alors que l'autre n'a pas vidé par exemple.
. S'assurer de n'avoir qu'une seule instance de ce contrôleur.
. Quelques exemples :
- accès unique à une base de données (on vient de le voir)
- objet "parent" d'une interface
- ...
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

=== Amélioration 1

Vous vous souvenez des premiers exercices {java}  sur les variables de classe
et vous proposez d'utiliser un compteur d'instance pour solutionner le problème.

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Vous essayez de modifier le constructeur pour qu'il ne fonctionne que si le compteur d'instance est à 0.
Qu'est-ce qui ne va pas dans le code suivant :
[source,java]
-----
include::{sourcedir}/Chocolat/src/BouilleurCptChocolat.java[lines=5..19]
-----
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Pas de return dans un constructeur.
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------


=== Amélioration 2

Vous changez de stratégie car vous vous souvenez avoir déjà vu ce type de code :

.Idée!
[source,java]
------
￼public MaClasse {
	private MaClasse() {...}
}
------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. Est-ce autorisé de rendre privé le constructeur?
. Comment créer une instance dans ces conditions? N'a-t'on pas tout simplement une classe inutilisable?
. Complétez le code suivant de façon à résoudre le problème :
+
[source,java]
-----
public class BouilleurChocolat {
	private boolean vide;
	private boolean bouilli;
	...
	...

	        BouilleurChocolat() {
		...
		...
		}

	...
	...
	...
	...

	public void remplir() {
		if (estVide()) {
			vide = false;
			bouilli = false;
			// remplir le bouilleur du mélange lait/chocolat }
		}
		// reste du code de BouilleurChocolat...
}
-----
+
. Donnez un exemple d'utilisation de cette classe.
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
. Oui!
. En implémentant une fonction qui s'en charge.
+
.Extrait de la solution
[source,java]
-----
include::{sourcedir}/Chocolat/src/BouilleurSafeChocolat.java[lines=5..20]
-----
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

=== C'est pas fini!

Vos cauchemars continuent! Mais cette fois ils sont en anglais! Vous voyez un
grand gaillard irlandais vous menacez (en fait vous confondez _threat_ et _thread_...).

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. En quoi les _threads_ peuvent-ils poser des problèmes dans votre solution?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Accès concurrent au 1er appel de `getInstance()`.
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------


== Application aux bases de données

.Programme d'accès à une BD en Java
[source,java]
------
include::{sourcedir}/src/Transact.java[]
------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Que pensez-vous du code ci-dessus?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Un objet créé pour chaque accès!
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------


== Le patron Singleton

[[Singleton]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Singleton*
====
include::pattern/singleton.txt[]
====

.Quelques exemples de description du patron Singleton
image::google-singleton.png[link="images/google-singleton.png"]

== Le patron Fabrique

[[Fabrique]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Fabrique*
====
include::pattern/fabrique.txt[]
====

.Quelques exemples de description du patron Fabrique
image::google-fabrique.png[link="images/google-fabrique.png"]

:numbered!:
== Pour aller plus loin

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Quelle est la différence entre un singleton et une variable globale?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Quelques éléments de solution :

- En {java} les variables globales sont des références statiques à des objets.
- Problème déjà vu de l'instanciation à la demande vs. au démarrage.
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

//----------------------------- Question ------------------
.*Mots-croisés*
[WARNING]
====
image::crossword1.png[link="images/crossword2.png"]
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::crossword2-sol.png[link="images/crossword2-sol.png"]
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. Comment testeriez-vous la mise en oeuvre du patron <<Singleton,Singleton>>?
. Comment testeriez-vous la mise en oeuvre du patron <<Fabrique,Fabrique>>?
====

TIP: N'hésitez pas à consulter
http://thecodersbreakfast.net/index.php?post/2008/02/25/26-de-la-bonne-implementation-du-singleton-en-java[le site dont je me suis inspiré].

ifndef::compact[]
== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
