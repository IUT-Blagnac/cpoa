== Introduction

Ce cours porte sur la **C**onception et **P**rogrammation **O**bjet **A**vancée.

ifdef::slides[:leveloffset: -1]

=== Concepts, bonnes pratiques et patrons

Vous avez appris (cf. M2103 et M2104) un certain nombre
de *concepts objets* :

[%step]
- Abstraction
- Encapsulation
- Polymorphisme
- Héritage

ifdef::slides[=== Concepts, bonnes pratiques et patrons (suite)]

Vous avez/allez ensuite appris des *bonnes pratiques* :

[%step]
- Identifier les aspects qui varient et les séparer des aspects constants
- Programmer une interface, non une implémentation
- Préférer la composition à l'héritage
- Les classes doivent être ouvertes à l'extension, mais fermées à la modification
- Dépendez d'abstractions. Ne dépendez pas de classes concrètes (inversion des dépendances)
- Ne parlez pas aux inconnus

ifdef::slides[=== Concepts, bonnes pratiques et patrons (suite)]

L'étape suivante consiste à apprendre les bonnes solutions de
conception, ce qu'on appelle les *patrons de conception*
(ou _design patterns_ en anglais).

=== Organisation

[NOTE]
====
Rappel du rythme : 1 cours, 1 TD et 2 TPs par semaine. Pendant 8 semaines.
====

[%step]
- La première semaine est consacré au principe des patrons
de conception, en partant d'un exemple (cours en fin de semaine).
- Les 5 ou 6 suivantes sont consacrées à l'étude de certains patrons classiques.
Mise en pratique sur des exercices en TP.
+
[NOTE]
====
Les TPs sont décalés d'une semaine (conception et étude d'un ou
plusieurs patrons semaine `N` et mise en oeuvre en TP semaine `N+1`).
====
+
- Les 2 ou 3 suivantes, les étudiants en mode projet pour faire du
_refactoring_ d'applications réelles (conception aidée en TD sur
les modèles {UML}, mise en oeuvre en TP).

ifdef::slides[=== Organisation (suite)]

Voici une proposition de déroulement des semaines :

Semaine 1::
  SuperCanard, le grand classique, <<Stratégie>>
Semaine 2::
* <<Singleton>>
Semaine 3::
Patrons <<Fabrique>>, <<Proxy>>, <<Etat>>
Semaine 4::
* <<Observateur>>
** version intuitive (2 interfaces)
** version Java (classe `Observable`)
Semaine 5::
  L'exemple de Meyer : menus en objet
Semaine 6::
  - Patrons Décorateur, Façade, Visiteur
  - MVC avec l'exemple `JTable` de {java}
  - Patrons Chaîne de responsabilité (juste en cours)
Semaines 7 et 8::
  * Quelques idées de projet final :
  ** Refactorer un code généré par {umple}.
  ** Refactorer le code de MPA (mais pas le leur, celui d'un autre groupe)

=== Evaluation et notation

Comme prévu par le http://webetud2.iut-blagnac.fr/pluginfile.php/1653/mod_resource/content/4/Contr%C3%B4les-2014-2015_S3.pdf[planning des contrôles],
les étudiants auront :

- une note de projet (TPs + projet final) => coef. 1
- une note d'examen final (semaine 5) => coef. 2

ifdef::slides[:leveloffset: 0]
