:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TD 3

:eleve:
:sourcedir: src/java/TD3

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault} - Semaine 3 (49)
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://iut-blagnac.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1. Je sais programmer en {java}.
2. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
3. Je maîtrise les concepts objet de base (héritage, polymorphisme, ...).
4. J'ai compris ce qu'est un patron et j'ai grand soif d'en apprendre d'autres que
_Strategy_ et Singleton
| {objtd}	| Aborder le patron *fabrique*.
| {duree}	| *1* TD et *2* TP de 1,5h (sur 2 semaines).
|======================

// // | {depot}	| -

== Rappel du cours

TIP: N'hésitez pas à (re)lire régulièrement le {sitecours}.

== La pizzeria O'Reilly

Vous êtes embauché dans une pizzeria pour faire ... de l'informatique!

Soit le code de départ suivant :

[source,java]
------
include::src/java/Pizzeria/src/Pizzeria.java[]
------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. Identifiez ce qui varie dans ce code (si la pression du marché fait
	ajouter des pizzas à la carte ou si une pizza n'a plus de succès et doit
	disparaître, etc.).
. Isolez dans une classe `SimpleFabriqueDePizzas` ce code.
. Réalisez le diagramme de classe obtenu.
. Quel est l’avantage de procéder ainsi ? Ne transfère-t'on pas
simplement le problème à un autre objet ?
====

TIP: Bien sûr vous héritez de cet horrible "if then else" et dans
votre implémentation en TP vous remplacerez ce code avantageusement
par un "switch case" et utilisez une `enum` comme vu en cours.

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
========
. Le `if` à remplacer par un `pizza = fabrique.creerPizza(type);`
et on ajoute le code suivant dans la classe :
+
[source,java]
------
	SimpleFabriqueDePizzas fabrique;

	public Pizzeria(SimpleFabriqueDePizzas fabrique) {
		this.fabrique = fabrique;
	}
------
+
NOTE: Faire remarquer que la pizza n'est plus la propriété de la pizzeria, mais
de la fabrique!
. Code de `SimpleFabriqueDePizzas`
+
[source,java]
------
include::src/java/JMIsPizzas/src/SimpleFabriqueDePizzas.java[]
------
+
. Diagramme de classe :
+
image::Pizzeria2.png[]
+
. En encapsulant la création des pizzas dans une seule classe, nous n’avons plus qu’un seul endroit auquel apporter
des modifications quand l’implémentation change.
========
endif::prof[]

== On y est presque...

Nous sommes arrivé à une situation propre, qui s'apparente
à un patron de conception. Mais avant d'en arriver à la définition
du patron lui-même, nous allons améliorer un peu les choses.

=== Succès des pizzerias O'Reilly : les franchises

Plusieurs villes veulent ouvrir des pizzerias comme la votre.
Votre patron, très content de vos programmes souhaite imposer à toutes
les futures pizzerias d'utiliser vos codes.

Le problème : les pizzas au fromage de Starsbourg sont différentes
des pizzas aux fromages de Corse!

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Proposez une solution où `SimpleFabriqueDePizzas` serait une
classe abstraite.
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
========
Simplement ajouter abstract, créer plusieurs sous-classes et avoir
une utilisation du style :

[source,java]
------
FabriqueDePizzasBrest fabriqueBrest = new FabriqueDePizzasBrest();
Pizzeria boutiqueBrest = new Pizzeria(fabriqueBrest);
boutiqueBrest.commander("Végétarienne");
...
FabriqueDePizzasStrasbourg fabriqueStrasbourg = new FabriqueDePizzasStrasbourg();
Pizzeria boutiqueStrasbourg = new Pizzeria(fabriqueStrasbourg);
boutiqueStrasbourg.commander("Végétarienne");
------

========
endif::prof[]

=== La dérive : chacun travaille comme il l'entend!

Les pizzerias utilisent bien vos fabriques mais ont changé
les procédures : certains ne coupent pas les pizzas, changent les
temps de cuissons, et les pizzerias O'Reilly perdent leur
identité. Il nous faut *restructurer* les pizzerias.

Un consultant italien payé fort cher (heureusement en pizzas!)
propose de revenir à une structure suivante :

[source,java]
------
public abstract class Pizzeria {
	public Pizza commanderPizza(String type) {
		Pizza pizza;

		pizza = creerPizza(type);
		pizza.preparer();
		pizza.cuire();
		pizza.couper();
		pizza.emballer();

		return pizza;
	}

	abstract creerPizza(String type);
}
------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Quelles sont les différences avec notre conception actuelle?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
========

- Pizzeria est maintenant abstraite (vous allez voir pourquoi ci-dessous).
- Maintenant, `creerPizza()` est de nouveau un appel à une méthode de Pizzeria
et non à un objet fabrique.
- Notre "méthode de fabrication" est maintenant abstraite dans `Pizzeria`.
- Et nous avons transféré notre objet fabrique à cette méthode.
========
endif::prof[]

=== Laisser les sous-classes décider

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Dans le schéma suivant, placez les méthodes au bon endroit de
façon à ce que les procédures soient respectées tout en ayant des pizzas
à variantes "régionales".

image::Pizzeria3.png[]
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
========

image::Pizzeria3-sol.png[]

Chaque sous-classe redéfinit la méthode `creerPizza()`,
tandis que toutes les sous-classes utilisent la méthode `commanderPizza()`
définie dans `Pizzeria`.

NOTE: Nous pourrions faire de `commanderPizza()` une méthode finale.

Voici un exemple de Pizzeria concrète :

[source,java]
------
public class PizzeriaBrest extends Pizzeria {
	Pizza creerPizza(String item) {
	if (choix.equals("fromage")) {
		return new PizzaFromageStyleBrest();
		} else if (choix.equals("vegetarienne")) {
		return new PizzaVegetarienneStyleBrest();
		} else if (choix.equals("fruitsDeMer")) {
		return new PizzaFruitsDeMerStyleBrest();
		} else if (choix.equals("poivrons")) {
		return new PizzaPoivronsStyleBrest();
		} else
		return null;
	}
}
------

========
endif::prof[]

=== Déclarer une méthode de fabrique

Rien qu'en apportant une ou deux transformations à `Pizzeria`,
nous sommes passés d'un objet gérant l'instanciation de nos classes concrètes
à un ensemble de sous-classes qui assument maintenant cette responsabilité.

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Quelle est la déclaration exacte de la méthode `creerPizza()`
de la classe `Pizzeria` ?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
========

[source,java]
------
protected abstract Pizza creerPizza(String type);
------

- `protected abstract` : Comme une méthode de fabrication est abstraite,
on compte sur les sous-classes pour gérer la création des objets.
- `Pizza` : Une méthode de fabrication retourne un Produit qu'on utilise généralement
dans les méthodes définies dans la superclasse.
- `creerPizza`: Une méthode de fabrique isole le client (le code de la superclasse,
	tel `commanderPizza()` : elle lui évite de devoir connaître la sorte de
	Produit concret qui est réellement créée.
========
endif::prof[]

=== Récapitulons

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Donnez le diagramme de séquence d'une "commande de pizza au fromage
de type Strasbourg".
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
========
image::Pizzeria-sec.png[]
========
endif::prof[]

NOTE: Vous implémenterez les classes manquantes en TP.

== Le patron Fabrique (simple)

Nous y sommes, vous venez de décortiquer le patron Fabrique Simple

[[Fabrique]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Fabrique (simple)*
====
include::pattern/fabrique.txt[]
====

ifndef::compact[]

.Quelques exemples de description du patron Fabrique
image::google-fabrique.png[link="images/google-fabrique.png"]

endif::compact[]


:numbered!:
== Pour aller plus loin

=== Et les pizzas dans tout ça !?

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Proposez un diagramme de classe UML pour les pizzas (classes, attributs et méthodes).
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
========
image::Pizzas-dc.png[]

Exemple de code pour `Pizza` :

[source,java]
---------
public abstract class Pizza {
	String nom;
	String pate;
	String sauce;
	ArrayList garnitures = new ArrayList();

	void preparer() {
		System.out.println("Préparation de " + nom);
		System.out.println("Étalage de la pâte...");
		System.out.println("Ajout de la sauce...");
		System.out.println("Ajout des garnitures: ");
		for (int i = 0; i < garnitures.size(); i++) {
			System.out.println(" " + garnitures.get(i));
		}
	}
	void cuire() {
		System.out.println("Cuisson 25 minutes à 180°");
	}
	void couper() {
		System.out.println("Découpage en parts triangulaires");
	}
	void emballer() {
		System.out.println("Emballage dans une boîte officielle");
	￼￼￼￼￼}
	public String getNom() {
		return nom;
	}
}
---------

========
endif::prof[]

=== Problème du main de test du jeu d'aventure

Vous avez sûrement dans votre `main` de l'application de jeu d'aventure
une partie du code ressamblant à ceci :

.Adaptation des comportements à la situation
[source,java]
-----
if (choix == "Epee") {
	perso.setArme(new ComportementEpee());
}
else if (choix == "Arc") {
	perso.setArme(new ComportementArc());
	else if ...
	...
}
-----

Ce code est peu adaptatif et va soufrir des évolutions, par exemple :

- changement de la liste des armes possibles
- rajouter des `if then else` à chaque nouvelle arme
- suppression de certaines armes
- ...

//----------------------------- Question ------------------
.*QUESTION(s)*
[WARNING]
====
. Isoler ce code dans une classe `SimpleFabriqueArme` qui possèdera
une méthode `creerComportementArme(String type)` qui retourne le comportement
adapté en fonction du paramètre reçu.
. Donnez le diagramme de classe {UML} de la nouvelle organisation.
. Donnez le diagramme de séquence du main.
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
. Implémentation
+
.Extrait de FabriqueArme.java
[source,java]
-----
include::{sourcedir}/src/simuaventure/comportements/arme/impl/SimpleFabriqueArme.java[lines=12..25]
-----
+
. Diagramme de classe de la fabrique de comportements d'armes
+
image::fabriqueArme.png[]
+
. Diagramme de séquence du `main`. Par exemple avec le code de test suivant :
+
[source,java]
------
Chevalier perso = new Chevalier("JMI");

SimpleFabriqueArme fabrique = new SimpleFabriqueArme();

perso.setArme(fabrique.creerComportementArme("Epee"));
perso.frapper();
------
+
image::fabriqueArme-seq.svg[]

====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

Vous complèterez le code du jeu d'aventure en TP. Mais avant cela étudions le patron
_Factory_ sur une exemple complet.

ifndef::compact[]
== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
