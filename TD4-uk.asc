:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TD 5

:eleve:
:sourcedir: src/java/TD3

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault} - Semaine 3 (49)
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://iut-blagnac.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10a",width="90%"]
|======================
| {pre}		|
. Je sais programmer en {java}.
. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
. Je maîtrise quelques patrons de conception.
| {objtd}	| Aborder le patron *Observer*.
| {duree}	| *1* TD et *2* TPs
|======================

// // | {depot}	| -

== Motivation


The need to maintain consistency between related objects without making
classes tightly coupled.

Use the Observer pattern in any of the following situations:

- When an abstraction has two aspects, one dependent on the other.
Encapsulating these aspects in separate objects lets you vary and reuse
them independently.
- When a change to one object requires changing others
- When an object should be able to notify other objects without making
assumptions about those objects


Defines an interface for update notification

ConcreteSubject
›
›
›

È

Keeps track of its observers
Provides an interface for attaching and detaching Observer objects

The object being observed
Stores state of interest to ConcreteObserver objects
Sends a notification to its observers when its state changes

ConcreteObserver
›
›
›

The observing object
Stores state that should stay consistent with the subject's
Implements the Observer update interface to keep its state consistent with the
subject's

Design Patterns In Java

The Observer Pattern
6

Bob Tarr

The Observer Pattern
l

Collaborations

Design Patterns In Java

The Observer Pattern
7

Bob Tarr

The Observer Pattern
l

Consequences
È

Benefits
›

›

Minimal coupling between the Subject and the Observer
l Can reuse subjects without reusing their observers and vice versa
l Observers can be added without modifying the subject
l All subject knows is its list of observers
l Subject does not need to know the concrete class of an observer, just that
each observer implements the update interface
l Subject and observer can belong to different abstraction layers
Support for event broadcasting
l Subject sends notification to all subscribed observers
l Observers can be added/removed at any time

Design Patterns In Java

The Observer Pattern
8

Bob Tarr

The Observer Pattern
l

Consequences
È

Liabilities
›

›

Possible cascading of notifications
l Observers are not necessarily aware of each other and must be careful
about triggering updates
Simple update interface requires observers to deduce changed item

Design Patterns In Java

The Observer Pattern
9

Bob Tarr

The Observer Pattern
l

Implementation Issues
È

How does the subject keep track of its observers?
›

È

What if an observer wants to observe more than one subject?
›

È

›
›

È

Have the subject tell the observer who it is via the update interface

Who triggers the update?
›

È

Array, linked list

The subject whenever its state changes
The observers after they cause one or more state changes
Some third party object(s)

Make sure the subject updates its state before sending out notifications
How much info about the change should the subject send to the observers?
›
›

Push Model - Lots
Pull Model - Very Little

Design Patterns In Java

The Observer Pattern
10

Bob Tarr

The Observer Pattern
l

Implementation Issues
È

Can the observers subscribe to specific events of interest?
›

È

Can an observer also be a subject?
›

È

If so, it's publish-subscribe
Yes!

What if an observer wants to be notified only after several subjects have
changed state?
›
›

Use an intermediary object which acts as a mediator
Subjects send notifications to the mediator object which performs any
necessary processing before notifying the observers

Design Patterns In Java

The Observer Pattern
11

Bob Tarr

The Observer Pattern
l

Sample Code
È

l

We'll see some Java soon!

Known Uses
È

Smalltalk Model/View/Controller user interface framework
›
›
›

È
l

Model = Subject
View = Observer
Controller is whatever object changes the state of the subject

Java 1.1 AWT/Swing Event Model

Related Patterns
È

Mediator
›

To encapsulate complex update semantics

Design Patterns In Java

The Observer Pattern
12

Bob Tarr

Java Implementation Of Observer
l
l

l

We could implement the Observer pattern “from scratch” in Java
But Java provides the Observable/Observer classes as built-in
support for the Observer pattern
The java.util.Observable class is the base Subject class. Any
class that wants to be observed extends this class.
È
È
È

È
l

Provides methods to add/delete observers
Provides methods to notify all observers
A subclass only needs to ensure that its observers are notified in the
appropriate mutators
Uses a Vector for storing the observer references

The java.util.Observer interface is the Observer interface. It must
be implemented by any observer class.

Design Patterns In Java

The Observer Pattern
13

Bob Tarr

The java.util.Observable Class
l

public Observable()
È

l

public synchronized void addObserver(Observer o)
È

l

Deletes an observer from the set of observers of this object

protected synchronized void setChanged()
È

l

Adds an observer to the set of observers of this object

public synchronized void deleteObserver(Observer o)
È

l

Construct an Observable with zero Observers

Indicates that this object has changed

protected synchronized void clearChanged()
È

Indicates that this object has no longer changed, or that it has already
notified all of its observers of its most recent change. This method is called
automatically by notifyObservers().

Design Patterns In Java

The Observer Pattern
14

Bob Tarr

The java.util.Observable Class
l

public synchronized boolean hasChanged()
È

l

public void notifyObservers(Object arg)
È

l

Tests if this object has changed. Returns true if setChanged() has been
called more recently than clearChanged() on this object; false otherwise.
If this object has changed, as indicated by the hasChanged() method, then
notify all of its observers and then call the clearChanged() method to
indicate that this object has no longer changed. Each observer has its
update() method called with two arguments: this observable object and the
arg argument. The arg argument can be used to indicate which attribute of
the observable object has changed.

public void notifyObservers()
È

Same as above, but the arg argument is set to null. That is, the observer is
given no indication what attribute of the observable object has changed.

Design Patterns In Java

The Observer Pattern
15

Bob Tarr

The java.util.Observer Interface
l

public abstract void update(Observable o, Object arg)
È

È

This method is called whenever the observed object is changed. An
application calls an observable object's notifyObservers method to have all
the object's observers notified of the change.
Parameters:
›
›

o - the observable object
arg - an argument passed to the notifyObservers method

Design Patterns In Java

The Observer Pattern
16

Bob Tarr

Observable/Observer Example
/**
* A subject to observe!
*/
public class ConcreteSubject extends Observable {
private String name;
private float price;
public ConcreteSubject(String name, float price) {
this.name = name;
this.price = price;
System.out.println("ConcreteSubject created: " + name + " at "
+ price);
}

Design Patterns In Java

The Observer Pattern
17

Bob Tarr

Observable/Observer Example (Continued)
public String getName() {return name;}
public float getPrice() {return price;}
public void setName(String name) {
this.name = name;
setChanged();
notifyObservers(name);
}
public void setPrice(float price) {
this.price = price;
setChanged();
notifyObservers(new Float(price));
}
}
Design Patterns In Java

The Observer Pattern
18

Bob Tarr

Observable/Observer Example (Continued)
// An observer of name changes.
public class NameObserver implements Observer {
private String name;
public NameObserver() {
name = null;
System.out.println("NameObserver created: Name is " + name);
}
public void update(Observable obj, Object arg) {
if (arg instanceof String) {
name = (String)arg;
System.out.println("NameObserver: Name changed to " + name);
} else {
System.out.println("NameObserver: Some other change to
subject!");
}
}
}
Design Patterns In Java

The Observer Pattern
19

Bob Tarr

Observable/Observer Example (Continued)
// An observer of price changes.
public class PriceObserver implements Observer {
private float price;
public PriceObserver() {
price = 0;
System.out.println("PriceObserver created: Price is " + price);
}
public void update(Observable obj, Object arg) {
if (arg instanceof Float) {
price = ((Float)arg).floatValue();
System.out.println("PriceObserver: Price changed to " +
price);
} else {
System.out.println(”PriceObserver: Some other change to
subject!");
}
}
The Observer Pattern
}
Design Patterns In Java
Bob Tarr
20

Observable/Observer Example (Continued)
// Test program for ConcreteSubject, NameObserver and PriceObserver
public class TestObservers {
public static void main(String args[]) {
// Create the Subject and Observers.
ConcreteSubject s = new ConcreteSubject("Corn Pops", 1.29f);
NameObserver nameObs = new NameObserver();
PriceObserver priceObs = new PriceObserver();
// Add those Observers!
s.addObserver(nameObs);
s.addObserver(priceObs);
// Make changes to the Subject.
s.setName("Frosted Flakes");
s.setPrice(4.57f);
s.setPrice(9.22f);
s.setName("Sugar Crispies");
}
}
The Observer Pattern
Design Patterns In Java
Bob Tarr
21

Observable/Observer Example (Continued)
l

Test program output
ConcreteSubject created: Corn Pops at 1.29
NameObserver created: Name is null
PriceObserver created: Price is 0.0
PriceObserver: Some other change to subject!
NameObserver: Name changed to Frosted Flakes
PriceObserver: Price changed to 4.57
NameObserver: Some other change to subject!
PriceObserver: Price changed to 9.22
NameObserver: Some other change to subject!
PriceObserver: Some other change to subject!
NameObserver: Name changed to Sugar Crispies

Design Patterns In Java

The Observer Pattern
22

Bob Tarr

A Problem With Observable/Observer
l

Problem:
È

Suppose the class which we want to be an observable is already part of an
inheritance hierarchy:
class SpecialSubject extends ParentClass

È

l

Since Java does not support multiple inheritance, how can we have
ConcreteSubject extend both Observable and ParentClass?

Solution:
È
È
È

Use Delegation
We will have SpecialSubject contain an Observable object
We will delegate the observable behavior that SpecialSubject needs to this
contained Observable object

Design Patterns In Java

The Observer Pattern
23

Bob Tarr

Delegated Observable
/**
* A subject to observe!
* But this subject already extends another class.
* So use a contained DelegatedObservable object.
* Note that in this version of SpecialSubject we do
*
not duplicate any of the interface of Observable.
*
Clients must get a reference to our contained
*
Observable object using the getObservable() method.
*/
public class SpecialSubject extends ParentClass {
private String name;
private float price;
private DelegatedObservable obs;

Design Patterns In Java

The Observer Pattern
24

Bob Tarr

Delegated Observable (Continued)
public SpecialSubject(String name, float price) {
this.name = name;
this.price = price;
obs = new DelegatedObservable();
}
public String getName() {return name;}
public float getPrice() {return price;}
public Observable getObservable() {return obs;}

Design Patterns In Java

The Observer Pattern
25

Bob Tarr

Delegated Observable (Continued)
public void setName(String name) {
this.name = name;
obs.setChanged();
obs.notifyObservers(name);
}
public void setPrice(float price) {
this.price = price;
obs.setChanged();
obs.notifyObservers(new Float(price));
}
}

Design Patterns In Java

The Observer Pattern
26

Bob Tarr

Delegated Observable (Continued)
l
l

l

l

l

l

What's this DelegatedObservable class?
Two methods of java.util.Observable are protected methods:
setChanged() and clearChanged()
Apparently, the designers of Observable felt that only subclasses
of Observable (that is, "true" observable subjects) should be able
to modify the state-changed flag
If SpecialSubject contains an Observable object, it could not
invoke the setChanged() and clearChanged() methods on it
So we have DelegatedObservable extend Observable and override
these two methods making them have public visibility
Java rule: An subclass can changed the visibility of an overridden
method of its superclass, but only if it provides more access

Design Patterns In Java

The Observer Pattern
27

Bob Tarr

Delegated Observable (Continued)
// A subclass of Observable that allows delegation.
public class DelegatedObservable extends Observable {
public void clearChanged() {
super.clearChanged();
}
public void setChanged() {
super.setChanged();
}
}

Design Patterns In Java

The Observer Pattern
28

Bob Tarr

Delegated Observable (Continued)
// Test program for SpecialSubject with a Delegated Observable.
public class TestSpecial {
public static void main(String args[]) {
// Create the Subject and Observers.
SpecialSubject s = new SpecialSubject("Corn Pops", 1.29f);
NameObserver nameObs = new NameObserver();
PriceObserver priceObs = new PriceObserver();
// Add those Observers!
s.getObservable().addObserver(nameObs);
s.getObservable().addObserver(priceObs);
// Make changes to the Subject.
s.setName("Frosted Flakes");
s.setPrice(4.57f);
s.setPrice(9.22f);
s.setName("Sugar Crispies");
}
}
Design Patterns In Java

The Observer Pattern
29

Bob Tarr

Delegated Observable (Continued)
l

l

This version of SpecialSubject did not provide implementations
of any of the methods of Observable. As a result, it had to allow
its clients to get a reference to its contained Observable object
using the getObservable() method. This may have dangerous
consequences. A rogue client could, for example, call the
deleteObservers() method on the Observable object, and delete all
the observers!
Let’s have SpecialSubject not expose its contained Observable
object, but instead provide “wrapper” implementations of the
addObserver() and deleteObserver() methods which simply pass
on the request to the contained Observable object.

Design Patterns In Java

The Observer Pattern
30

Bob Tarr

Delegated Observable (Continued)
/**
* A subject to observe!
* But this subject already extends another class.
* So use a contained DelegatedObservable object.
* Note that in this version of SpecialSubject we
*
provide implementations of two of the methods
*
of Observable: addObserver() and deleteObserver().
*
These implementations simply pass the request on
*
to our contained DelegatedObservable reference.
*
Now clients can use the normal Observable semantics
*
to add themselves as observers of this object.
*/
public class SpecialSubject2 extends ParentClass {
private String name;
private float price;
private DelegatedObservable obs;
Design Patterns In Java

The Observer Pattern
31

Bob Tarr

Delegated Observable (Continued)
public SpecialSubject2(String name, float price) {
this.name = name;
this.price = price;
obs = new DelegatedObservable();
}
public String getName() {return name;}
public float getPrice() {return price;}
public void addObserver(Observer o) {
obs.addObserver(o);
}
public void deleteObserver(Observer o) {
obs.deleteObserver(o);
}
Design Patterns In Java

The Observer Pattern
32

Bob Tarr

Delegated Observable (Continued)
public void setName(String name) {
this.name = name;
obs.setChanged();
obs.notifyObservers(name);
}
public void setPrice(float price) {
this.price = price;
obs.setChanged();
obs.notifyObservers(new Float(price));
}
}

Design Patterns In Java

The Observer Pattern
33

Bob Tarr

Delegated Observable (Continued)
// Test program for SpecialSubject2 with a Delegated Observable.
public class TestSpecial2 {
public static void main(String args[]) {
// Create the Subject and Observers.
SpecialSubject2 s = new SpecialSubject2("Corn Pops", 1.29f);
NameObserver nameObs = new NameObserver();
PriceObserver priceObs = new PriceObserver();
// Add those Observers!
s.addObserver(nameObs);
s.addObserver(priceObs);
// Make changes to the Subject.
s.setName("Frosted Flakes");
s.setPrice(4.57f);
s.setPrice(9.22f);
s.setName("Sugar Crispies");
}
}
Design Patterns In Java

The Observer Pattern
34

Bob Tarr

Java 1.1 Event Model
l

l

l

l
l

l

Java 1.1 introduced a new GUI event model based on the
Observer Pattern
GUI components which can generate GUI events are called event
sources
Objects that want to be notified of GUI events are called event
listeners
Event generation is also called firing the event
Comparison to the Observer Pattern:
ConcreteSubject => event source
ConcreteObserver => event listener
For an event listener to be notified of an event, it must first
register with the event source

Design Patterns In Java

The Observer Pattern
35

Bob Tarr

Java 1.1 Event Model (Continued)
l

l

An event listener must implement an interface which provides the
method to be called by the event source when the event occurs
Unlike the Observer Pattern which defines just the one simple
Observer interface, the Java 1.1 AWT event model has 11
different listener interfaces, each tailored to a different type of
GUI event:
È

Listeners For Semantic Events
›
›
›
›

ActionListener
AdjustmentListener
ItemListener
TextListener

Design Patterns In Java

The Observer Pattern
36

Bob Tarr

Java 1.1 Event Model (Continued)
È

Listeners For Low-Level Events
›
›
›
›
›
›
›

l

ComponentListener
ContainerListener
FocusListener
KeyListener
MouseListener
MouseMotionListener
WindowListener

Some of these listener interfaces have several methods which
must be implemented by an event listener. For example, the
WindowListener interface has seven such methods. In many
cases, an event listener is really only interested in one specific
event, such as the Window Closing event.

Design Patterns In Java

The Observer Pattern
37

Bob Tarr

Java 1.1 Event Model (Continued)
l

Java provides “adapter” classes as a convenience in this situation.
For example, the WindowAdapter class implements the
WindowListener interface, providing “do nothing”
implementation of all seven required methods. An event listener
class can extend WindowAdapter and override only those
methods of interest.

Design Patterns In Java

The Observer Pattern
38

Bob Tarr

AWT Example 1
import java.awt.*;
import java.awt.event.*;
/**
* An example of the Java 1.1 AWT event model.
* This class not only builds the GUI, but it is the
*
listener for button events.
*/
public class ButtonExample1
extends WindowAdapter
implements ActionListener {
Frame frame;
Panel buttonPanel;
Button redButton, greenButton;

Design Patterns In Java

The Observer Pattern
39

Bob Tarr

AWT Example 1 (Continued)
// Build the GUI and display it.
public ButtonExample1(String title) {
frame = new Frame(title);
buttonPanel = new Panel(new FlowLayout());
redButton = new Button("Red");
redButton.setBackground(Color.red);
redButton.setActionCommand("Change To Red");
redButton.addActionListener(this);
buttonPanel.add(redButton);
greenButton = new Button("Green");
greenButton.setBackground(Color.green);
greenButton.setActionCommand("Change To Green");
greenButton.addActionListener(this);
buttonPanel.add(greenButton);

Design Patterns In Java

The Observer Pattern
40

Bob Tarr

AWT Example 1 (Continued)
frame.add("Center", buttonPanel);
frame.addWindowListener(this);
frame.pack();
frame.setVisible(true);
}
// Since we are a WindowAdapter, we already implement the
// WindowListener interface. So only override those methods
// we are interested in.
public void windowClosing(WindowEvent e) {
System.exit(0);
}

Design Patterns In Java

The Observer Pattern
41

Bob Tarr

AWT Example 1 (Continued)
// Since we handle the button events, we must implement
// the ActionListener interface.
public void actionPerformed(ActionEvent e) {
String cmd = e.getActionCommand();
if (cmd.equals("Change To Red")) {
System.out.println("Red pressed");
buttonPanel.setBackground(Color.red);
}
else if (cmd.equals("Change To Green")) {
System.out.println("Green pressed");
buttonPanel.setBackground(Color.green);
}
}
public static void main(String args[]) {
new ButtonExample1("Button Example");
}
}
Design Patterns In Java

The Observer Pattern
42

Bob Tarr

AWT Example 2
import java.awt.*;
import java.awt.event.*;
/**
* An example of the Java 1.1 AWT event model.
* This class uses anonymous inner classes as the
*
listeners for button events. As a result, we
*
do not need to implement ActionListener.
*/
public class ButtonExample2
extends WindowAdapter {
Frame frame;
Panel buttonPanel;
Button redButton, greenButton;

Design Patterns In Java

The Observer Pattern
43

Bob Tarr

AWT Example 2 (Continued)
// Build the GUI and display it.
public ButtonExample2(String title) {
frame = new Frame(title);
buttonPanel = new Panel(new FlowLayout());
redButton = new Button("Red");
redButton.setBackground(Color.red);
redButton.setActionCommand("Change To Red");
redButton.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
System.out.println("Red pressed");
buttonPanel.setBackground(Color.red);
}
} );
buttonPanel.add(redButton);

Design Patterns In Java

The Observer Pattern
44

Bob Tarr

AWT Example 2 (Continued)
greenButton = new Button("Green");
greenButton.setBackground(Color.green);
greenButton.setActionCommand("Change To Green");
greenButton.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
System.out.println("Green pressed");
buttonPanel.setBackground(Color.green);
}
} );
buttonPanel.add(greenButton);
frame.add("Center", buttonPanel);
frame.addWindowListener(this);
frame.pack();
frame.setVisible(true);
}

Design Patterns In Java

The Observer Pattern
45

Bob Tarr

AWT Example 2 (Continued)
// Since we are a WindowAdapter, we already implement the
// WindowListener interface. So only override those methods
// we are interested in.
public void windowClosing(WindowEvent e) {
System.exit(0);
}
public static void main(String args[]) {
new ButtonExample2("Button Example");
}
}

Design Patterns In Java

The Observer Pattern
46

Bob Tarr

MVC Example 1
l

This example shows the model and the view in the same class
/**
* Class CounterGui demonstrates having the model and view
*
in the same class.
*/
public class CounterGui extends Frame {
// The counter. (The model!)
private int counter = 0;
// The view.
private TextField tf = new TextField(10);

Design Patterns In Java

The Observer Pattern
47

Bob Tarr

MVC Example 1 (Continued)
public CounterGui(String title) {
super(title);
Panel tfPanel = new Panel();
tf.setText("0");
tfPanel.add(tf);
add("North", tfPanel);
Panel buttonPanel = new Panel();
Button incButton = new Button("Increment");
incButton.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
counter++;
tf.setText(counter + "");
}
} );
buttonPanel.add(incButton);
Design Patterns In Java

The Observer Pattern
48

Bob Tarr

MVC Example 1 (Continued)
Button decButton = new Button("Decrement");
decButton.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
counter--;
tf.setText(counter + "");
}
} );
buttonPanel.add(decButton);
Button exitButton = new Button("Exit");
exitButton.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
System.exit(0);
}
} );
buttonPanel.add(exitButton);
add("South", buttonPanel);
The Observer Pattern
Design Patterns In Java
49

Bob Tarr

MVC Example 1 (Continued)
addWindowListener(new WindowAdapter() {
public void windowClosing(WindowEvent e) {
System.exit(0);
}
} );
}
public static void main(String[] argv) {
CounterGui cg = new CounterGui("CounterGui");
cg.setSize(300, 100);
cg.setVisible(true);
}
}
l

Where is the controller in this example?? The controllers are the
instances of the anonymous classes which handle the button
presses.

Design Patterns In Java

The Observer Pattern
50

Bob Tarr

MVC Example 2
l
l

This example shows the model and the view in separate classes
First the view class:
/**
* Class CounterView demonstrates having the model and view
*
in the separate classes. This class is just the view.
*/
public class CounterView extends Frame {
// The view.
private TextField tf = new TextField(10);
// A reference to our associated model.
private Counter counter;

Design Patterns In Java

The Observer Pattern
51

Bob Tarr

MVC Example 2 (Continued)
public CounterView(String title, Counter c) {
super(title);
counter = c;
Panel tfPanel = new Panel();
tf.setText(counter.getCount()+ "");
tfPanel.add(tf);
add("North", tfPanel);
Panel buttonPanel = new Panel();
Button incButton = new Button("Increment");
incButton.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
counter.incCount();
tf.setText(counter.getCount() + "");
}
} );
buttonPanel.add(incButton);
The Observer Pattern
Design Patterns In Java
52

Bob Tarr

MVC Example 2 (Continued)
Button decButton = new Button("Decrement");
decButton.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
counter.decCount();
tf.setText(counter.getCount()+ "");
}
} );
buttonPanel.add(decButton);
Button exitButton = new Button("Exit");
exitButton.addActionListener(new ActionListener() {
public void actionPerformed(ActionEvent e) {
System.exit(0);
}
} );
buttonPanel.add(exitButton);
add("South", buttonPanel);
The Observer Pattern
Design Patterns In Java
53

Bob Tarr

MVC Example 2 (Continued)
addWindowListener(new WindowAdapter() {
public void windowClosing(WindowEvent e) {
System.exit(0);
}
} );
}
public static void main(String[] argv) {
Counter counter = new Counter(0);
CounterView cv1 = new CounterView("CounterView1", counter);
cv1.setSize(300, 100);
cv1.setVisible(true);
CounterView cv2 = new CounterView("CounterView2", counter);
cv2.setSize(300, 100);
cv2.setVisible(true);
}
}
Design Patterns In Java

The Observer Pattern
54

Bob Tarr

MVC Example 2 (Continued)
l

Next the model class:
/**
* Class Counter implements a simple counter model.
*/
public class Counter {
// The model.
private int count;
public Counter(int count) { this.count = count; }
public int getCount() { return count; }
public void incCount() { count++; }
public void decCount() { count--; }
}

Design Patterns In Java

The Observer Pattern
55

Bob Tarr

MVC Example 2 (Continued)
l

l

l

Note that we instantiated one model and two views in this
example:

But we have a problem! When the model changes state, only one
view updates!
We need the Observer Pattern here!

Design Patterns In Java

The Observer Pattern
56

Bob Tarr

MVC Example 3
l

l

This example shows the model and the view in separate classes
with the model being observable
First the model class:
import java.util.Observable;
/**
* Class ObservableCounter implements a simple observable
*
counter model.
*/
public class ObservableCounter extends Observable {
// The model.
private int count;
public ObservableCounter(int count) { this.count = count; }

Design Patterns In Java

The Observer Pattern
57

Bob Tarr

MVC Example 3 (Continued)
public int getCount() { return count; }
public void incCount() {
count++;
setChanged();
notifyObservers();
}
public void decCount() {
count--;
setChanged();
notifyObservers();
}
}

Design Patterns In Java

The Observer Pattern
58

Bob Tarr

MVC Example 3 (Continued)
l

Next the view class:
/**
* Class ObservableCounterView demonstrates having the model
* and view in the separate classes. This class is just the
* view.
*/
public class ObservableCounterView extends Frame {
// The view.
private TextField tf = new TextField(10);
// A reference to our associated model.
private ObservableCounter counter;

Design Patterns In Java

The Observer Pattern
59

Bob Tarr

MVC Example 3 (Continued)
public ObservableCounterView(String title,
ObservableCounter c) {
super(title);
counter = c;
// Add an anonymous observer to the ObservableCounter.
counter.addObserver(new Observer() {
public void update(Observable src, Object obj) {
if (src == counter) {
tf.setText(((ObservableCounter)src).getCount() + "");
}
}
} );
// Same GUI code as Example 2 not shown...

Design Patterns In Java

The Observer Pattern
60

Bob Tarr

MVC Example 3 (Continued)
public static void main(String[] argv) {
ObservableCounter counter = new ObservableCounter(0);
ObservableCounterView cv1 = new
ObservableCounterView("ObservableCounterView1", counter);
cv1.setSize(300, 100);
cv1.setVisible(true);
ObservableCounterView cv2 = new
ObservableCounterView("ObservableCounterView2", counter);
cv2.setSize(300, 100);
cv2.setVisible(true);
}
}

Design Patterns In Java

The Observer Pattern
61

Bob Tarr

MVC Example 3 (Continued)
l

Looking good now!

Design Patterns In Java

The Observer Pattern
62

Bob Tarr


