== Importance de la visibilité

Dès que l'on commence à avoir une application conséquente, l'organisation
en _package_ devient obligatoire. Revenons donc sur les questions de
*visibilité* des propriétés et méthodes, qui seront importants dans la plupart
des aspects de ce module.

Si un champ d'une classe `A` :

- est _private_, il est accessible uniquement depuis sa propre classe ;
- a la visibilité _package_ (visibilité par défaut, pas de mot-clef), il est accessible de partout dans
le paquetage de `A` mais de nulle part ailleurs ;
- est _protected_, il est accessible de partout dans le paquetage de `A` et,
si `A` est publique, grosso modo dans les classes héritant de `A` dans d'autres
paquetages ;
- est _public_, il est accessible de partout dans le paquetage de `A` et,
si `A` est publique, de partout ailleurs.

NOTE: Ci-dessus, les niveaux de visibilité sont rangés par visibilité croissante.

ifdef::slides[== Importance de la visibilité (exemple)]

[source,java]
----
package UN;
public class A {
  protected String attrprotected;
  String attrfriend; // friend
}
----

Si on définit une deuxième classe dans le même _package_ :

[source,java]
----
package UN;
  class B {
    ...
    {
        A a = new A ();
        a.attrprotected// OK : même si bizarre
        a.attrfriend  // OK : visible package
    }
  }

package UN;
  class C extends A {
    ...
    {
        this.attrprotected// OK : normal
        this.attrfriend // OK : visible package
    }
  }
----

ifdef::slides[== Importance de la visibilité (suite de l'exemple)]

[source,java]
----
package DEUX;
  class B {
      ...
    {
        A a = new A ();
        a.attrprotected// NON OK : normal
        a.attrfriend  // NON OK : normal, proche de "private"
    }
  }

  class C extends A {
      ...
    {
        this.attrprotected// OK : normal car protected et héritage
        this.attrfriend // NON OK : normal, proche de "private"
    }
  }
----

ifdef::slides[== Alors private ou protected ?]

À la question `private` ou `protected` ? Quel est le mieux pour les attributs ?

[%step]
- C'est une question de *style de programmation* !
- Puristes (Meyer) => `private`
- Parfois utile : cf. _Strategy_, évite les getters/setters

ifdef::slides[== Visibilité et UML]

NOTE: Il n'y a pas de visibilité par défaut en {UML}.
