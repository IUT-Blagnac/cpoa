== Introduction


=== Concepts objets

Vous avez appris (cf. M2103 et M2104) un certain nombre
de *concepts objets* :

[%step]
- Abstraction
- Encapsulation
- Héritage
- Polymorphisme

//-------------- book
ifdef::backend-pdf[]
Rappelons rapidement leurs définitions.
endif::backend-pdf[]
//--------------------

ifdef::slides[:leveloffset: -1]

ifdef::slides[]
==== Abstraction

Définition :

endif::slides[]

==== Abstraction

Définition (restrictive) :

[quote]
Une classe est une *abstraction* des
caractéristiques communes d'un ensemble d'objets.

ifdef::slides[]
==== Encapsulation

Définition :

endif::slides[]

==== Encapsulation

Définition (restrictive) :

[quote]
Dans la description d'un objet, le but de l'*encapsulation* est de masquer
les attributs et les méthodes, c’est-à-dire, la manière dont est réalisé le
comportement de l'objet.

ifdef::slides[]
==== Héritage

Définition :

endif::slides[]

==== Héritage

Définition (simpliste) :

[quote]
L'héritage est la transmission de caractéristiques à ses descendants.

La classe qui hérite a accès aux méthodes et attributs de niveau `public` et
`protected` de sa classe mère. 

Les attributs `private` existent mais ne sont pas accessibles depuis le code de la classe.

ifdef::slides[]
==== Polymorphisme

Le nom de polymorphisme vient du grec :

endif::slides[]

==== Polymorphisme

Le nom de polymorphisme vient du grec :

[quote]
qui peut prendre plusieurs formes

[IMPORTANT]
====
L'héritage concerne les classes, le polymorphisme concerne les objets.
====

ifdef::slides[==== Polymorphisme (suite)]

On distingue généralement trois types de polymorphisme :

[%step]
- Le polymorphisme *ad hoc* (également surcharge ou en anglais overloading)
- Le polymorphisme *paramétrique* (également généricité ou en anglais template)
- Le polymorphisme *d'héritage* (également redéfinition, spécialisation ou en anglais overriding)

ifdef::slides[:leveloffset: -1]

===== Polymorphisme ad hoc

- Appelé aussi *surcharge*.
- Permet d'avoir des fonctions de même nom dans des classes sans aucun rapport entre elles.
- Permet de définir des opérateurs d'utilisation différente en fonction des paramètres.

[source,C]
----
int method(int,int);
int method(int);
int method(float,float);
----

===== Le polymorphisme paramétrique

Appelé aussi *généricité*.
ifdef::backend-pdf[En voici un exemple en Java :]

[source,Java]
----
interface Iterator<E> {
    boolean hasNext();
    E next();
}

public <T> static void copy(Collection<? extends T> source, Collection<? super T> dest) {
    for (T t : source) {
         dest.add(t);
    }
}
----

===== Le polymorphisme d'héritage

- Appelé aussi *spécialisation* (ou redéfinition).
- Lié à la redéfinition des méthodes héritées.

ifdef::slides[:leveloffset: +2]


=== Objectifs de la conception objet
//http://www.regismedina.com/articles/fr/principes-avances-conception-objet/objectifs

On essaye d'éviter trois problèmes principaux du développement :

[%step]
La rigidité::
Anticiper les évolutions susceptibles d'impacter l'application.
La fragilité::
Eviter les erreurs provoquées par la modification d'une partie du code.
L'immobilité::
Rendre moins difficile l'extraction d'une partie du code.

=== Bonnes pratiques et patrons

Pour répondre aux problèmes ci-dessus, on va s'attaquer à diminuer les
*dépendances* et éviter l'"effet spaghetti".

Les qualités recherchées sont :

[%step]
- Robustesse : les changements n'introduisent pas de régressions.
- Extensibilité : il est facile d'ajouter de nouvelles fonctionnalités.
- Réutilisabilité : il est possible de réutiliser certaines parties de code pour construire d'autres applications.

ifdef::slides[=== Bonnes pratiques et patrons (suite)]

Nous allons apprendre des *bonnes pratiques* :

[%step]
- Identifier les aspects qui varient et les séparer des aspects constants
- Programmer une interface, non une implémentation
- Préférer/Favoriser la composition à l'héritage lorsque c'est possible (héritage paraît moins naturel). 
+
L'héritage => "être un" (avoir toutes les caractéristiques)
- Les classes doivent être ouvertes à l'extension, mais fermées à la modification
- Dépendez d'abstractions. Ne dépendez pas de classes concrètes (inversion des dépendances)
- Ne parlez pas aux inconnus

ifdef::slides[=== Bonnes pratiques et patrons (suite)]

L'étape suivante consiste à apprendre les bonnes solutions de
conception, ce qu'on appelle les *patrons de conception*
(ou _design patterns_ en anglais).

