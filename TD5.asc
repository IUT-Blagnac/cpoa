:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TD 5

:eleve:
:sourcedir: src/java/TD5

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault} - (Semaine 49)
:lang: fr
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIONS DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://iut-blagnac.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img
:principe: Principe de conception
:allerPlusLoin: Pour aller plus loin
:about: À propos

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée image:icons/solution.png[]
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10a",width="90%"]
|======================
| {pre}		|
. Je sais programmer en {java}.
. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
. Je maîtrise quelques patrons de conception.
| {objtd}	| Aborder le patron *Observer*.
| {duree}	| *1* TD et *2* TPs
|======================

ifndef::compact[]

== Rappel du cours

TIP: N'hésitez pas à (re)lire régulièrement le {sitecours}.

endif::compact[]

== Motivation

Dans cet exercice, nous allons explorer comment on peut maintenir
la cohérence entre plusieurs objets qui sont liés sans pour autant
maintenir d'association fortes entre ces objets.

.L'illustration classique du patron Observer
image::observer-illustration.png[]

== Le patron Observer

=== Définition

include::pattern/observer.txt[]

Quelques précisions :

- les observateurs doivent être enregistrés
- le sujet est chargé de prévenir les observateurs (d'un changement).

.Exemple d'utilisation
image::observer-scenario2.png[]

On peut réaliser de plusieurs façon le `attacher`, mais
il doit être fait pour que ca marche :

- par un objet extérieur,
- par le `concreteObserver` lui-même.

=== Objectif

- Définir une dépendance un-plusieurs entre un objet observé et des objets
observateurs de telle façon que quand l'observé évolue, ces observateurs
sont informés et mis à jour automatiquement.

=== Application

Le patron _Observer_ est utilisable dans de nombreuses situations :

- Quand un concept a deux aspects, l'un dépendant de l'autre.
Encapsuler ces aspects dans des objets séparés permet de les utiliser
et les laisser évoluer de manière indépendante.
- Dès que le changement d'un objet entraîne le changement de plusieurs autres.
- Dès qu'un objet doit en notifier un certain nombre d'autres sans les connaitre.

=== Participants

* `Subject`
** Garde trace de ses `observers`
** Fournit une interface pour attacher et détacher les objets `Observer`
* `Observer`
** Définit une interface pour les notifications `update`
* `ConcreteSubject`
** Les objets observés.
** Gère les objets `ConcreteObserver` intéressés.
** Envoit une notification à ses observateurs quand il change d'état
* `ConcreteObserver`
** Les objets observateurs.
** Gère la cohérence avec l'état de l'observé.
** Implémente l'interface `update()` d'`Observer`.

=== Scenario

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Pour vérifiez que vous avez compris son utilité, réalisez
un diagramme de séquence illustrant l'utilisation du patron _Observer_.
====

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
========
.Exemple d'utilisation
image::observer-scenario.png[]
========
endif::prof[]

=== Bénéfices

* Couplage minimal entre `Subject` et `Observer`
-  On peut utiliser les sujets sans se soucier des observateurs et vice-versa
-  Les observateurs peuvent être ajoutés sans modifier nécessairement le sujet
-  Tout ce que le sujet connait de ses observateurs, c'est leur liste
-  Le sujet n'a pas connaissance de la classe concrète des observateurs, juste
qu'ils implémente l'interface `update`
-  Sujet et observateur peuvent appartenir à des couches d'abstraction différentes
* Support à la diffusion d'événements
-  Le sujet envoie des notifications à tous ses observateurs
-  Les observateurs peuvent être ajoutés/retirés à la volée

=== Limites

* Possibilité d'effets en cascade
- Les observateurs ne sont pas nécessairement au courant les uns des autres.
Il faut donc être prudent sur les effets des `update`
* Implication pour observateurs de déduire les changements à partir d'un
simple `update`.

== Implémentation

ifdef::slides[:leveloffset: -1]

=== Problèmes

Nous allons maintenant nous intéresser à l'implémentation.

TIP: Si vous connaissez l'implémentation `Observer` {java},
essayez de l'oublier!

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Voici une liste des éléments, liés à l'implémentation, à résoudre.
Pour chacune, essayez de fournir des éléments de réponse :

. Comment le sujet garde la trace de ses observateurs?
. Et si un observateur veut observer plus d'un sujet?
. Qui déclence les `update`?
. Comment s'assurer que les sujets mettent bien à jour leur état avant de
notifier leur changement.
. Quel niveau de détail au sujet de son changement doit transmettre le sujet
à ses observateurs?
. Est-ce que les observateurs peuvent souscrire à des événements spécifiques?
. Est-ce qu'un observateur peut lui-même être un sujet?
. Peut-on faire en sorte qu'un observateur soit notifié qu'après qu'un certain
nombre de sujets aient changé d'état?
====

//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
========

. Array, liste chaînée, ...
. Le subject peut s'identifier auprès des observateurs via l'interface `update`
. Par exemple :
- Le subjet quand il change d'état
- Les observateurs après qu'ils ait provoqué un ou plusieurs changements
- Des objets quelconques!
. Difficile autrement que par checking/testing
. Par exemple :
- Push Model => Beaucoup
- Pull Model => Le moins possible
. On parle alors de _publish-subscribe_
. Yes!
. Par exemple :
- Utiliser un objet intermédiaire qui agit comme médiateur
========
endif::prof[]

=== _Observer_ en Java

{Java} fournit des classes _Observable/Observer_ pour le patron _Observer_.
La classe `java.util.Observable` est la classe de base pour les sujets.
Ainsi, toute classe qui veut être observée étant cette classe dont
voici les caractéristiques :

- fournit des méthodes pour ajouter/enlever des  observateurs
- fournit des méthodes pour notifier les observateurs
- une sous-classe concrète doit seulement s'occuper de notifier à chque
méthode modifiant l'état des objets (_mutators_)
- utilise un vecteur stoquant les références des observateurs

L'interface `java.util.Observer` correspond aux observateurs
qui doivent implémenter cette interface.

ifdef::slides[:leveloffset: -1]

==== La classe java.util.Observable

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Voici la liste des méthodes de `java.util.Observable` :

[source,java,linenum]
-----
public Observable()
public synchronized void addObserver(Observer o)
protected synchronized void setChanged()
public synchronized void deleteObserver(Observer o)
protected synchronized void clearChanged()
public synchronized boolean hasChanged()
public void notifyObservers(Object arg)
public void notifyObservers()
-----

Retrouver les commentaires correspondants :

. Adds an observer to the set of observers of this object
. If this object has changed, as indicated by the hasChanged() method, then
notify all of its observers and then call the clearChanged() method to
indicate that this object has no longer changed. Each observer has its
update() method called with two arguments: this observable object and the
arg argument. The arg argument can be used to indicate which attribute of
the observable object has changed.
. Indicates that this object has changed
. Indicates that this object has no longer changed, or that it has already
notified all of its observers of its most recent change. This method is called
automatically by `notifyObservers()`.
. Same as above, but the arg argument is set to null. That is, the observer is
given no indication what attribute of the observable object has changed.
. Tests if this object has changed. Returns true if setChanged() has been
called more recently than clearChanged() on this object; false otherwise.
. Construct an `Observable` with zero observers
. Deletes an observer from the set of observers of this object
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
========

[source,java,linenum]
-----
public Observable()
// => Construct an `Observable` with zero Observers
public synchronized void addObserver(Observer o)::
// => Adds an observer to the set of observers of this object
protected synchronized void setChanged()
// => Indicates that this object has changed
public synchronized void deleteObserver(Observer o)
// => Deletes an observer from the set of observers of this object
protected synchronized void clearChanged()
/* => Indicates that this object has no longer changed, or that it has already
notified all of its observers of its most recent change. This method is called
automatically by notifyObservers(). */
public synchronized boolean hasChanged()
/* => Tests if this object has changed. Returns true if setChanged() has been
called more recently than clearChanged() on this object; false otherwise. */
public void notifyObservers(Object arg)
/* => If this object has changed, as indicated by the hasChanged() method, then
notify all of its observers and then call the clearChanged() method to
indicate that this object has no longer changed. Each observer has its
update() method called with two arguments: this observable object and the
arg argument. The arg argument can be used to indicate which attribute of
the observable object has changed. */
public void notifyObservers()
/* => Same as above, but the arg argument is set to null. That is, the observer
is given no indication what attribute of the observable object has changed. */
-----

========
endif::prof[]


==== L'interface java.util.Observer


[source,java,linenum]
.java.util.Observer
-----
/**
* This method is called whenever the observed object is changed. An
* application calls an observable object's notifyObservers method to have all
* the object's observers notified of the change.
*
* Parameters:
* o - the observable object
* arg - an argument passed to the notifyObservers method
*/
public abstract void update(Observable o, Object arg)
-----

ifdef::slides[:leveloffset: +1]

=== Observable/Observer par l'exemple

[source,java,linenum]
.ConcreteSubject.java
-----
/**
* A subject to observe!
*/
public class ConcreteSubject extends Observable {

  private String name;
  private float price;
  public ConcreteSubject(String name, float price) {
    this.name = name;
    this.price = price;
    System.out.println("ConcreteSubject created: " + name + " at " + price);
  }
  public String getName() {return name;}
  public float getPrice() {return price;}
  public void setName(String name) {
    this.name = name;
    setChanged();
    notifyObservers(name);
  }
  public void setPrice(float price) {
    this.price = price;
    setChanged();
    notifyObservers(new Float(price));
  }
}
-----

[source,java,linenum]
.NameObserver.java
-----
// An observer of name changes.
public class NameObserver implements Observer {
  private String name;
  public NameObserver() {
    name = null;
    System.out.println("NameObserver created: Name is " + name);
  }
  public void update(Observable obj, Object arg) {
    if (arg instanceof String) {
      name = (String)arg;
      System.out.println("NameObserver: Name changed to " + name);
    } else {
      System.out.println("NameObserver: Some other change to
      subject!");
    }
  }
}
-----

.PriceObserver.java
[source,java,linenum]
-----
// An observer of price changes.
public class PriceObserver implements Observer {
  private float price;
  public PriceObserver() {
    price = 0;
    System.out.println("PriceObserver created: Price is " + price);
  }
  public void update(Observable obj, Object arg) {
    if (arg instanceof Float) {
      price = ((Float)arg).floatValue();
      System.out.println("PriceObserver: Price changed to " +
      price);
    } else {
      System.out.println(”PriceObserver: Some other change to
      subject!");
    }
  }
}
-----

[source,java,linenum]
.TestObservers.java
-----
// Test program for ConcreteSubject, NameObserver and PriceObserver
public class TestObservers {
  public static void main(String args[]) {
    // Create the Subject and Observers.
    ConcreteSubject s = new ConcreteSubject("Corn Pops", 1.29f);
    NameObserver nameObs = new NameObserver();
    PriceObserver priceObs = new PriceObserver();
    // Add those Observers!
    s.addObserver(nameObs);
    s.addObserver(priceObs);
    // Make changes to the Subject.
    s.setName("Frosted Flakes");
    s.setPrice(4.57f);
    s.setPrice(9.22f);
    s.setName("Sugar Crispies");
  }
}
-----

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Donnez la trace d'exécution du code ci-dessus.
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
========

[source,java,linenum]
.Test program output
.......
ConcreteSubject created: Corn Pops at 1.29
NameObserver created: Name is null
PriceObserver created: Price is 0.0
PriceObserver: Some other change to subject!
NameObserver: Name changed to Frosted Flakes
PriceObserver: Price changed to 4.57
NameObserver: Some other change to subject!
PriceObserver: Price changed to 9.22
NameObserver: Some other change to subject!
PriceObserver: Some other change to subject!
NameObserver: Name changed to Sugar Crispies
.......

On oublie souvent que le moindre changement informe les deux observateurs.

Attention: l'exécution des méthodes observateur.update() n'est pas déterministe car chaque appel est effectué dans un thread spécifique.
========
endif::prof[]

=== Limitations de Observable/Observer en Java

Problème::
Supposons que la classe que nous voulons rendre observable est déjà
une sous-classe, par exemple :

[source,java,linenum]
------
class SpecialSubject extends ParentClass
------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Puisque {Java} ne supporte pas l'héritage multiple, comment pouvons-nous
avoir `ConcreteSubject` qui étende à la fois `Observable` et `ParentClass` ?

. Proposez une solution
. Définissez le diagramme de classe correspondant
. Écrire l'implémentation {java} (principalement `SpecialSubject`)
+
TIP: Deux méthodes de `java.util.Observable` sont *protected* : `setChanged()`
et `clearChanged()`.

Vous pourrez pour vous aider utiliser le code de test suivant :

[source,java]
-----
// Test program for SpecialSubject with a Delegated Observable.
public class TestSpecial {
  public static void main(String args[]) {
    // Create the Subject and Observers.
    SpecialSubject s = new SpecialSubject("Corn Pops", 1.29f);
    NameObserver nameObs = new NameObserver();
    PriceObserver priceObs = new PriceObserver();
    // Add those Observers!
    s.getObservable().addObserver(nameObs);
    s.getObservable().addObserver(priceObs);
    // Make changes to the Subject.
    s.setName("Frosted Flakes");
    s.setPrice(4.57f);
    s.setPrice(9.22f);
    s.setName("Sugar Crispies");
  }
}
-----

Qui produit la même trace qu'à l'exercice précédent.

/////
.......
ConcreteSubject created: Corn Pops at 1.29
NameObserver created: Name is null
PriceObserver created: Price is 0.0
PriceObserver: Some other change to subject!
NameObserver: Name changed to Frosted Flakes
PriceObserver: Price changed to 4.57
PriceObserver: Price changed to 9.22
PriceObserver: Some other change to subject!
NameObserver: Name changed to Sugar Crispies
.......
/////

====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
========
. Une solution :
- Utiliser une délégation
- Nous aurons un `SpecialSubject` qui contient un `Observable`
- Nous déléguons les aspects "observabilité" dont `SpecialSubject` a besoin à
son objet contenu, de type `Observable`
. Diagramme de classe :
+
image::specialsubject.png[]
+
. Code {java} :

[source,java,linenum]
------
/**
 * A subject to observe!
 * But this subject already extends another class.
 * So use a contained DelegatedObservable object.
 * Note that in this version of SpecialSubject we do
 * not duplicate any of the interface of Observable.
 * Clients must get a reference to our contained
 * Observable object using the getObservable() method.
 */
import java.util.Observable;

public class SpecialSubject extends ParentClass {
   private String name;
   private float price;
   private DelegatedObservable obs;

   public SpecialSubject(String name, float price) {
     this.name = name;
     this.price = price;
     obs = new DelegatedObservable();
     System.out.println("ConcreteSubject created: " + name + " at " + price);
   }
   public String getName() {return name;}
   public float getPrice() {return price;}
   public Observable getObservable() {return obs;}
   public void setName(String string) {
     name = string;
     obs.setChanged();
     obs.notifyObservers(name);
   }
   public void setPrice(float f) {
     price = f;
     obs.setChanged();
     obs.notifyObservers(price);
   }
}
------

Explications (désolé pour l'anglais) :

What's this `DelegatedObservable` class?
It implements the two methods of `java.util.Observable` that are protected methods:
`setChanged()` and `clearChanged()`.

NOTE: Apparently, the designers of Observable felt that only subclasses
of Observable (that is, "true" observable subjects) should be able
to modify the state-changed flag.

If `SpecialSubject` contains an `Observable` object, it could not
invoke the `setChanged()` and `clearChanged()` methods on it.
So we have `DelegatedObservable` extends `Observable` and override
these two methods making them have public visibility.

NOTE: {Java} rule: A subclass can changed the visibility of an overridden
method of its superclass, but only if it provides more access.
========
endif::prof[]

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Après avoir étudié avec votre prof préféré la solution à la question précédente :

. Voyez-vous un problème dans cette implementation?
. Pouvez-vous y apporter une solution?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
========
. The problem: this version of `SpecialSubject` did not provide implementations
of any of the methods of `Observable`. As a result, it had to allow
its clients to get a reference to its contained `Observable` object
using the `getObservable()` method. This may have dangerous
consequences. A rogue client could, for example, call the
`deleteObservers()` method on the `Observable` object, and delete all
the observers!
Let’s have `SpecialSubject` not expose its contained `Observable`
object, but instead provide "wrapper" implementations of the
`addObserver()` and `deleteObserver()` methods which simply pass
on the request to the contained `Observable` object.
. The solution
+
[source,java]
-----
import java.util.Observer;

public class SpecialSubject2 extends ParentClass {
  private String name;
  private float price;
  private DelegatedObservable obs;
  public SpecialSubject2(String name, float price) {
    this.name = name;
    this.price = price;
    obs = new DelegatedObservable();
  }
  public String getName() {return name;}
  public float getPrice() {return price;}
  public void addObserver(Observer o) {
    obs.addObserver(o);
  }
  public void deleteObserver(Observer o) {
    obs.deleteObserver(o);
  }
  public void setName(String name) {
    this.name = name;
    obs.setChanged();
    obs.notifyObservers(name);
  }
  public void setPrice(float price) {
    this.price = price;
    obs.setChanged();
    obs.notifyObservers(new Float(price));
  }
}
-----

========
endif::prof[]

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Quelles modifications doit-on apporter au test?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
========
[source,java]
-----
//s.getObservable().addObserver(nameObs);
s.addObserver(nameObs);
//s.getObservable().addObserver(priceObs);
s.addObserver(priceObs);
-----
========
endif::prof[]

:numbered!:
== Pour aller plus loin

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
- Pour l'exemple du `price` et du `name`, on aurait pu faire
que seuls les `PriceObserver` soient notifiés d'un changement
de prix et que seuls les `NameObserver` soient notifiés d'un
changement de nom. Comment faire?
- Faire le lien avec les listeners vus en Swing
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[CAUTION]
.Solution
========
- Pas simple à faire car pas possible de "différencier" des types d'observateurs ...
+
Et le `notify` est déjà implémenté ...
+
Mais faisable: 
+
. avec la solution finale et 2 types de add/remove observeurs : add/removeNameObservers et add/removePriceobservers et gérer 2 Observable internes.
+
. Modifier/surcharger notre implémentation de addObserver et notifyObservers, et rajouter un paramètre "typeEvenement" qui correspond au type d'évènement auquel on veut s'abonner. Mais cela nécessite de réimplémeter une grande partie de l'Observable en Java...

- Vous êtes-vous demandés dans quel ordre était notifiés les observateurs?
- Voir le fichier link:Observer-suite.txt[] sur le github pour compléter.
========
endif::prof[]

ifndef::compact[]
== About...

****************************************************************
Document réalisé via {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
  Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
  image:88x31.png["Licence Creative
  Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
  http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
