== Le patron Visiteur

ifdef::slides[:leveloffset: -1]

image::les-visiteurs.jpg[]

=== Le problème

Quelques situations à problème :

[%step]
- Une *structure* d'objets contient beaucoup de classes différentes
d'interfaces distinctes, et vous désirez réaliser des opérations sur ces objets
qui dépendent de leurs classes concrètes.
- Il s'agit d'effectuer plusieurs opérations distinctes et sans relation entre
elles, sur les objets d'une structure, et ceci en *évitant de polluer leurs classes* avec ces opérations.
- Les classes qui définissent la structure objet changent rarement, mais on doit
souvent *définir de nouvelles opérations* sur cette structure.

=== Le patron Visiteur

*Visiteur* (*_Visitor_*) permet la représentation d'une opération applicable
aux éléments d'une structure d'objet.

Il définit une nouvelle opération, *sans qu'il soit nécessaire de modifier la classe* des éléments sur lesquels
elle agit.

ifdef::slides[=== Le patron Visiteur (structure)]

ifndef::slides[.Patron Visiteur : structure]
image::visitor-dc.svg[]

ifdef::slides[=== Le patron Visiteur (comportement)]

ifndef::slides[.Patron Visiteur : comportement]
image::visitor-seq.png[]

ifdef::slides[=== Le patron Visiteur (Google)]

ifndef::slides[.Visiteur sur Google]
image::visitor-google.png[]


=== Avantages/Inconvénients

Avantages :

[%step]
- Permet d'ajouter des opérations à la structure d’un Composite *sans modifier la structure elle-même*.
- L'*ajout de nouvelles opérations* est relativement facile.
- Le code des opérations exécutées par le Visiteur est *centralisé*.

Inconvénients :

[%step]
- L'encapsulation des classes du Composite est brisée.
- Comme une fonction de navigation est impliquée, les modifications de la structure du Composite sont plus difficiles.

=== Exemples d'utilisation

- calcul sur un ensemble structuré d'éléments
- génération de rapports ou de code
- ...

=== Exemple concret d'utilisation en Java

NOTE: Exemple tiré de http://www.journaldev.com/1769/visitor-design-pattern-in-java-example-tutorial[ce site].

ifdef::slides[.ItemElement.java]
[source,java]
----------
public interface ItemElement {

  public int accept(ShoppingCartVisitor visitor);
}
----------

ifdef::slides[=== Exemple concret (suite)]

ifdef::slides[.Book.java]
[source,java]
----------
public class Book implements ItemElement {

  private int price;
  private String isbnNumber;

  public Book(int cost, String isbn){
    this.price=cost;
    this.isbnNumber=isbn;
  }

  public int getPrice() {
    return price;
  }

  public String getIsbnNumber() {
    return isbnNumber;
  }

  @Override
  public int accept(ShoppingCartVisitor visitor) {
    return visitor.visit(this);
  }

}
----------

ifdef::slides[=== Exemple concret (suite)]

ifdef::slides[.Fruit.java]
[source,java]
----------
public class Fruit implements ItemElement {

  private int pricePerKg;
  private int weight;
  private String name;

  public Fruit(int priceKg, int wt, String nm){
    this.pricePerKg=priceKg;
    this.weight=wt;
    this.name = nm;
  }

  public int getPricePerKg() {
    return pricePerKg;
  }

  public int getWeight() {
    return weight;
  }

  public String getName(){
    return this.name;
  }

  @Override
  public int accept(ShoppingCartVisitor visitor) {
    return visitor.visit(this);
  }
}
----------

ifdef::slides[=== Exemple concret (suite)]

ifdef::slides[.ShoppingCartVisitor.java]
[source,java]
----------
public interface ShoppingCartVisitor {

  int visit(Book book);
  int visit(Fruit fruit);
}
----------

ifdef::slides[=== Exemple concret (suite)]

ifdef::slides[.ShoppingCartVisitorImpl.java]
[source,java]
----------
public class ShoppingCartVisitorImpl implements ShoppingCartVisitor {

  @Override
  public int visit(Book book) {
    int cost=0;
    //apply 5$ discount if book price is greater than 50
    if(book.getPrice() > 50){
      cost = book.getPrice()-5;
    } else cost = book.getPrice();
    System.out.println("Book ISBN::"+book.getIsbnNumber() + " cost ="+cost);
    return cost;
  }

  @Override
  public int visit(Fruit fruit) {
    int cost = fruit.getPricePerKg()*fruit.getWeight();
    System.out.println(fruit.getName() + " cost = "+cost);
    return cost;
  }
}
----------

ifdef::slides[=== Exemple concret (suite)]

ifdef::slides[.ShoppingCartClient.java]
[source,java]
----------
public class ShoppingCartClient {

  public static void main(String[] args) {
    ItemElement[] items = new ItemElement[]{new Book(20, "1234"),new Book(100, "5678"),
    new Fruit(10, 2, "Banana"), new Fruit(5, 5, "Apple")};

    int total = calculatePrice(items);
    System.out.println("Total Cost = "+total);
  }

  private static int calculatePrice(ItemElement[] items) {
    ShoppingCartVisitor visitor = new ShoppingCartVisitorImpl();
    int sum=0;
    for(ItemElement item : items){
      sum = sum + item.accept(visitor);
    }
    return sum;
  }

}
----------

ifdef::slides[=== Exemple concret (suite)]

..........
Book ISBN::1234 cost =20
Book ISBN::5678 cost =95
Banana cost = 20
Apple cost = 25
Total Cost = 160
..........

ifdef::slides[:leveloffset: +1]
