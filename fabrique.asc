
== Le patron Fabrique

ifdef::slides[:leveloffset: -1]

=== Principes de conception

[NOTE]
.Design pattern : *Fabrique* (_Factory_)
====
include::pattern/fabrique.txt[]
====

=== Premier exemple d'utilisation de patron

ifndef::slides[.1er exemple d'utilisation de Fabrique]
image::pizzeria1.png[link="images/pizzeria1.png"]

ifdef::slides[=== Utilisation de patron (suite)]

ifndef::slides[.Exemple complet d'utilisation de Fabrique]
image::pizzeria.png[link="images/pizzeria.png"]

=== Autre exemple concret

.Factory en PHP (source http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns[ici])
[source,php]
--------
<?php
class DBFactory
{
  public static function load($sgbdr)
  {
    $classe = 'SGBDR_' . $sgbdr;

    if (file_exists($chemin = $classe . '.class.php'))
    {
      require $chemin;
      return new $classe;
    }
    else
    {
      throw new RuntimeException('La classe <strong>' . $classe . '</strong> n\'a pu être trouvée !');
    }
  }
}
?>
--------

ifdef::slides[=== Autre exemple concret (suite)]

.Factory en PHP (source http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns[ici])
[source,php]
--------
<?php
try
{
  $mysql = DBFactory::load('MySQL');
}
catch (RuntimeException $e)
{
  echo $e->getMessage();
}
?>
--------

ifdef::slides[=== Autre exemple concret (AA)]

.Factory en java (source : votre module AA!)
[source,java]
--------
include::src/java/XmlExprParser.java[]
--------

=== Mais c'est pas fini!

Reprenons nos pizzas vues en link:TD3.html[TD]

ifndef::slides[.Une pizzeria dépendante]
image::pizzeria-dep.png[]

ifdef::slides[=== Inversion des dépendances]

ifndef::slides[.Une pizzeria dépendante]
image::pizzeria.png[]

ifdef::slides[=== Inversion des dépendances]

[%step]
- Aucune variable ne doit contenir une référence à une classe concrète.
- Aucune classe ne doit dériver d'une classe concrète.
- Aucune classe ne doit redéfinir une méthode implémentée dans une classe de base.


ifdef::slides[=== Patron Fabrique]

ifndef::slides[.Une pizzeria avec Fabrique]
image::Pizzeria-sec.png[]

ifdef::slides[=== Patron Fabrique]

.Problème de la dépendance des ingrédients
image::Pizzeria-sec1.png[]

ifdef::slides[=== Patron Fabrique pour une famille de produits]

ifndef::slides[.Des cartes adaptées]
image::ingredients.png[]

ifdef::slides[=== Fabrique d'ingrédients]

[source,java]
-----------
public interface FabriqueIngredientsPizza {
  public Pate creerPate ();
  public Sauce creerSauce();
  public Fromage creerFromage();
  public Legumes[] creerLegumes();
  public Poivrons creerPoivrons();
  public Moules creerMoules();
}
-----------

ifdef::slides[=== Fabrique d'ingrédients (suite)]

[source,java]
-----------
public class FabriqueIngredientsPizzaBrest implements FabriqueIngredientsPizza {
  public Pate creerPate() {
    return new PateFine();
  }
  public Sauce creerSauce() {
    return new SauceMarinara();
  }
  ...
}
-----------

[source,java]
-----------
public class FabriqueIngredientsPizzaStrasbourg implements FabriqueIngredientsPizza {
  public Pate creerPate() {
    return new PateEpaisse();
  }
  public Sauce creerSauce() {
    return new SauceTomateCerise();
  }
  ...
}
-----------

ifdef::slides[=== Fabrique d'ingrédients (utilisation)]

[source,java]
-----------
public class PizzaFromage extends Pizza {
  FabriqueIngredientsPizza fabriqueIngredients;

  public PizzaFromage(FabriqueIngredientsPizza fabriqueIngredients) {
    this.fabriqueIngredients = fabriqueIngredients;
  }
  void preparer() {
    System.out.println("Préparation de " + nom);
    pate = fabriqueIngredients.creerPate();
    sauce = fabriqueIngredients.creerSauce();
    fromage = fabriqueIngredients.creerFromage();
  }
}
-----------

=== Fabrique abstraite

Nous sommes arrivé à une version du patron Fabrique appelée <<FabriqueAbstraite, Fabrique Abstraite>> :

include::pattern/fabrique-abstraite.txt[]

ifdef::slides[:leveloffset: 0]
