== Le patron Itérateur

ifdef::slides[:leveloffset: -1]

=== Le problème

On veut pouvoir :

- pour accéder au contenu d'un objet d'un agrégat sans en révéler la
représentation interne ;
- pour gérer simultanément plusieurs parcours dans des agrégats d'objets ;
- pour offrir une interface uniforme pour les parcours au travers de
diverses structures agrégats (c'est-à-dire, pour permettre l'itération
polymorphe).

=== Le patron Itérateur

include::pattern/iterateur.txt[]

ifdef::slides[=== Le patron Itérateur]

ifndef::slides[.Iterateur sur Google]
image::iterateur-google.png[]


=== Exemple concret

ifdef::slides[.Itérateur Ruby]
[source,ruby]
----------
# Saluer tout le monde
def say_hi
  if @names.nil?
    puts "..."
  elsif @names.respond_to?("each")
    # @names est une liste de noms : traitons-les uns par uns
    @names.each do |name|
      puts "Hello #{name}!"
    end
  else
    puts "Hello #{@names}!"
  end
end
----------


ifdef::slides[:leveloffset: +1]
