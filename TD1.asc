:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TD 1

:eleve:
:sourcedir: src/java/TD1

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://jmbruel.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1. Je sais programmer en {java}.

2. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.

3. Je maîtrise les concepts objet de base (héritage, polymorphisme, ...).
| {objtd}	| Comprendre ce qu'est une *conception*.
| {duree}	| *1* TD et *2* TP de 1,5h (sur 2 semaines).
|======================

// // | {depot}	| -

== Rappel du cours

// TIP: N'hésitez pas à (re)lire régulièrement le {sitecours}.

Ce TD étant le premier de l'année, aucune référence au cours de cette année
n'est requise. Le cours du semestre dernier (M2104) est considéré comme acquis!

== L'application SuperCanard

NOTE: Les exercices de ce TD sont tirés de l'excellent livre "Tête la première : Design Pattern".
Bert Bates, Eric Freeman, Elisabeth Freeman, Kathy Sierra. Editions O'Reilly. 2005.

=== Application existante

Soit l'application (un jeu de simulation de mare aux canards) `SuperCanard` dont le modèle est
décrit ci-dessous :

.Extrait d'une application existante (source plantUML link:images/superCanard.plantuml[ici])
image::superCanard.png[]

NOTE: De nombreuses autres classes héritent de `Canard`.

Voici un exemple de code :

.Première version de Canard.java
[source,java]
--------
abstract public class Canard {

	public void cancaner() {
		System.out.println("Je cancane comme un Canard!");
	}

	public void nager() {
		System.out.println("Je nage comme un Canard!");
	}

	abstract public void afficher();
}
--------

.Première version de Colvert.java
[source,java]
--------
public class Colvert extends Canard {

	public void afficher() {
		System.out.println("Je suis un Colvert");
	}

}
--------

=== Modification/Amélioration

Votre hiérarchie vous demande maintenant d'améliorer l'application
pour être plus proche de la réalité.

Vous décidez d'ajouter une méthode `voler()` à vos canards :

.Nouvelle fonctionnalité
image::superCanard2-note.png[]

.Deuxième version de Canard.java
[source,java]
--------
abstract public class Canard {

	public void cancaner() {
		System.out.println("Je cancane comme un Canard!");
	}

	public void nager() {
		System.out.println("Je nage comme un Canard!");
	}

	abstract public void afficher();

	public void voler() {
		System.out.println("Je vole comme un Canard!");
	};
}
--------

=== Catastrophe!

La hiérarchie vous appelle en urgence : des canards en plastiques se mettent
à voler dans l'application! En plus, certains canards malades, qui ne devraient
pas voler, volent!

TIP: Vous avez oublié que certains canards ne volaient pas!

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Complétez la phrase suivante : L'*héritage* c'est super pour faire
de la ............. mais c'est plus problématique pour les aspects .............
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
L'*héritage* c'est super pour faire
de la *réutilisation* mais c'est plus problématique pour les aspects *maintenance*
(ou *évolution*).
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

=== Solution 1 : redéfinition de méthodes

Vous songez à une première solution simple : redéfinir la méthode `voler()`
dans les canards qui ne volent pas.

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Complétez le code java suivant pour réaliser cette solution :

[source,java]
--------
public class CanardEnPlastique extends Canard {

	@Override
	public void afficher() {
		System.out.println("Je suis un CanardEnPlastique!");
	}






}
--------
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[source,java]
--------
include::src/java/TD1/src/CanardEnPlastique-old.java[]
--------
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------


//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Dans la liste ci-après, quels sont les inconvénients à utiliser l’héritage pour
définir le comportement de `Canard` ? (Plusieurs choix possibles.) :

- [ ] Le même code est dupliqué (réécrit) entre les sous-classes.
- [ ] Les changements de méthodes de comportements au moment de l'exécution sont difficiles.
- [ ] Nous ne pouvons pas avoir de canards qui dansent.
- [ ] Il est difficile de connaître tous les comportements des canards
- [ ] Les canards ne peuvent pas voler et cancaner en même temps.
- [ ] Les modifications peuvent affecter involontairement d'autres canards.
====


//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
[options=interactive]
- [*] Le même code est dupliqué (réécrit) entre les sous-classes.
- [*] Les changements de méthodes de comportements au moment de l'exécution sont difficiles.
- [ ] Nous ne pouvons pas avoir de canards qui dansent.
- [*] Il est difficile de connaître tous les comportements des canards
- [ ] Les canards ne peuvent pas voler et cancaner en même temps.
- [*] Les modifications peuvent affecter involontairement d'autres canards.
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------


=== Solution 2 : utilisation des interfaces

Vous songez à utiliser les interfaces pour améliorer le code.

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. Sur le diagramme suivant indiquez les relations d'héritage (`extends` de java)
et d'implémentation (`implements` de java) :
+
image::superCanardInterfaces.png[]
+
. Que pensez-vous de la conception obtenue ?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::superCanardInterfacesSolution.png[]
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

=== Solution 3 : isoler ce qui varie

Vous êtes confrontés au même problème que dans le module `MPA` de ce début
d'année : *LE CHANGEMENT*!

Nous allons donc appliquer un bon principe de conception :

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
Identifiez les aspects de votre code qui varient et
séparez-les de ceux qui demeurent constants.
====

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Quels sont les deux principales choses qui varient dans votre code?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
`voler()` et `cancaner()` : des comportements.
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

==== Implémentation des comportements

Commençons par implémenter les comportements de manière séparée.
Pour cela nous rappelons un bon principe que vous avez déjà utilisé :

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
Programmer une interface, non une implémentation.
====

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
En appliquant le principe ci-dessus, proposez une conception (diagramme de classe uniquement)
avec les classes et/ou interfaces (à vous de juger) suivantes : `ComportementVol`,
`VolerAvecDesAiles`, `NePasVoler`.
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Nous avons ajouté à la solution la version pour `ComportementCancan`.

image::comportement.png[]

Question : quelle est la différence avec une classe abstraite au lieu d'une interface pour les comportements?

====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

==== Intégration du comportement

Il nous faut maintenant relier les classes de canards à leur comportement.

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. Ajouter à la classe `Canard` deux variables d'instance.
. Enlevez les méthodes devenues inutiles.
. Remplacez-les (donnez les implémentations) par les méthodes
`effectuerVol()` et `effectuerCancan()` (qui utilisent les vartiables d'instances
précédentes).
. Modifiez les constructeurs de `Colvert` (par exemple) pour indiquer
comment vos variables d'instance sont initialisées.
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
. Ajouter à la classe `Canard` deux variables d'instance.
. Enlevez les méthodes devenues inutiles.
. Remplacez-les (donnez les implémentations) par les méthodes
`effectuerVol()` et `effectuerCancan()` (qui utilisent les variables d'instances
précédentes).
+
.Nouvelle version de link:src/java/TD1/src/Canard.java[Canard.java]
[source,java]
--------
include::src/java/TD1/src/Canard.java[]
--------
+
. Modifiez les constructeurs de `Colvert` (par exemple) pour indiquer
comment vos variables d'instance sont initialisées.
+
.link:src/java/TD1/src/Colvert.java[Colvert.java]
[source,java]
--------
include::src/java/TD1/src/Colvert.java[]
--------
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

==== Résumé et mise en oeuvre

Il est temps maintenant de prendre du recul et d'expérimenter les
avantages de notre nouvelle conception.

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. Réalisez le diagramme de classe complet de l'application.
. Que feriez-vous pour ajouter la propulsion à réaction à l'application?
. Voyez-vous une classe qui pourrait utiliser le comportement de `Cancan`
et qui n'est pas un `Canard`?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
. Réalisez le diagramme de classe complet de l'application.
+
image::superCanardFinal.png[link="images/superCanardFinal.png"]
+
. Que feriez-vous pour ajouter la propulsion à réaction à l'application?
+
Tout simplement créer une classe `VolAReaction` qui implémente l'interface
`ComportementVol`.
+
. Voyez-vous une classe qui pourrait utiliser le comportement de `Cancan`
et qui n'est pas un `Canard`?
+
Par exemple un appeau!
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

=== Votre premier _Design Pattern_

==== La pattern Stratégie

En fait vous venez de mettre en oeuvre votre premier _Design Pattern_ :
le patron _Strategy_ (*Stratégie* en français).

[[strategy]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Stratégie* (_Strategy_)
====
include::pattern/strategy.txt[]
====

.Quelques exemples de description du patron _Strategy_
image::google-strategy.png[link="images/google-strategy.png"]

==== Mise en oeuvre et révision

//----------------------------- Question ------------------
[icon="{iconsdir}/tuxteacher.png"]
[WARNING]
====
On vous demande de reprendre un jeu d'aventure dont
seul le modèle ci-dessous est fourni.

image::aventure-sujet.png[link="images/aventure-sujet.png"]

. Réorganiser les classes
. Identifier les classes abstraites, les interfaces et les classes ordinaires.
. Tracer les liens entre les classes ("est un", implémentation, "a un")
. Placer la méthode `setArme()` ci-dessous :
+
[source,java]
-----
setArme(ComportementArme a) {
  this.arme = a;
}
-----
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::aventure.png[link="images/aventure.png"]
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

:numbered!:
== Pour aller plus loin

Nous avons utilisé sans le nommer un troisième bon principe :

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
Préférez la composition à l'héritage.
====

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Quelle différence entre notre conception finale
et une implémentation du type :

[source,java]
-----
abstract public class Canard implements ComportementVol {...}
-----
====

//----------------------------- Question ------------------
.*Mots-croisés*
[WARNING]
====
image::crossword1.png[link="images/crossword1.png"]
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
image::crossword1-sol.png[link="images/crossword1-sol.png"]
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Comment testeriez-vous la mise en oeuvre du patron <<strategy,Strategy>>?
====

TIP: N'hésitez pas à consulter un autre exemple, orienté "jeux de rôle",
https://app.box.com/shared/yrlj0takyhjeg1mefacy[ici (p.116)].


ifndef::compact[]
== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
