== Le patron Composite

ifdef::slides[:leveloffset: -1]

=== Le problème

On veut pouvoir :

- représenter des hiérarchies de l'individu.
- que le client n'ait pas à se préoccuper de la différence entre
"combinaisons d'objets" et "objets individuels". Les clients pourront traiter
de façon uniforme tous les objets de la structure composite.

=== Le patron Composite

include::pattern/composite.txt[]

ifdef::slides[=== Le patron Composite]

ifndef::slides[.Composite sur Google]
image::composite-google.png[]


=== Exemple concret

ifdef::slides[.Exemple de Composite Java]
[source,java]
----------
import java.util.ArrayList;

interface Graphic {
    public void print();
}

class CompositeGraphic implements Graphic {

  private ArrayList<Graphic> mChildGraphics = new ArrayList<Graphic>();

  public void print() {
    for (Graphic graphic : mChildGraphics) {
      graphic.print();
    }
  }

  public void add(Graphic graphic) {
    mChildGraphics.add(graphic);
  }

  public void remove(Graphic graphic) {
    mChildGraphics.remove(graphic);
  }
}
----------

=== un "Anti" exemple

Que pensez-vous de cette définition de Composite ?

ifndef::slides[.Patron abîmé composite]
image::anti-composite.png[]

TIP: On appelle ces modèles des "Patrons abîmés" (_anti-patterns_).

ifdef::slides[:leveloffset: +1]
