:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TP 2

:eleve:
:sourcedir: src/java/TD2

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:
:experimental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://jmbruel.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1. Je sais programmer en {java}.
2. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
3. J'ai compris ce qu'est un patron.
4. J'ai réalisé le TD `BonChoco` et donc connait le patron Singleton!
| {objtd}	| Comprendre ce qu'est une *conception* et implémenter mon deuxième patron.
| {duree}	| *2* TP de 1,5h (sur 2 semaines).
|======================

== Fichiers utiles pour la génération de modèles

- le link:util/plantuml.bat[plantuml.bat]
- la link:util/plantUmlDoclet.jar[doclet pour javadoc]
- le link:util/plantuml.jar[jar plantuml]

== Rappel sur le patron Singleton

[[Singleton]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Singleton*
====
include::pattern/singleton.txt[]
====

TIP: N'hésitez pas à (re)lire régulièrement le {sitecours}.

== Reprise du TD 2 en mode Dojo (1ère séance de TP)

Nous allons reprendre succinctement
le http://iut-blagnac.github.io/cpoa/TD2.html[TD2] en mode
http://fr.wikipedia.org/wiki/Coding_Dojo[Coding Dojo] en espérant
que cela vous donne envie de participer à ceux organisés certains jeudi à l'IUT.

=== Le principe :

. Le prof de TP initie l'exercice en ouvrant un eclipse et en commençant un
test qui commence par échouer et qui "passera" quand la fonctionalité attendue
sera implémentée et fonctionnelle.
. Il vérifie que son test échoue bien
+
TIP: On pourra avantageusement installer le plug-in eclipse
http://infinitest.github.io/[InfiniTest] qui permet de runner les tests à
chaque sauvegarde
+
. Il fait en sorte que le test passe au vert  le plus vite possible
. Il "refactor" éventuellement (faire passer le test au vert mais de façon
  intelligente, éviter la duplication de code, réorganiser les classes, etc.)
. Quand tout est au vert on passe à une fonctionnalité suivante

=== Les règles

- Toutes les 5 minutes (timer sonore) on change de personne aux commandes
(au clavier/souris en l'occurence)
- Il faut un "maître du temps"
- Tout le monde participe au codage (et ne fait pas du code de son côté)
+
NOTE: Les machines ne sont donc pas utiles pour cette partie! Seule la machine
connectée au vidéoprojecteur est utilisée.
+
- Le volontariat c'est mieux, mais le prof est libre d'organiser le tour de rôle.
- En 90' de TP on peut faire passer 18 personnes, donc tout le monde y passe et
le plus tôt est en général le moins compliqué.
- Merci à ceux qui ont déjà participé aux coding dojos de montrer l'exemple ;-)

== Jeu d'aventure (2ème séance de TP)

=== Mise en oeuvre de Singleton

En reprenant le jeu d'aventure du TP1 :

.Un jeu d'aventure minimaliste
image::aventure.png[link="images/aventure.png"]

Implémentez le patron singleton comme demandé à la
http://iut-blagnac.github.io/cpoa/TD2.html#_et_si_on_améliorait_le_jeu_d_aventure_avec_singleton[section 4.2 du TD2].

=== Modèles et tests d'architecture

. En utilisant la doclet pour Javadoc de {plantUML}, comme au TP1, générez votre diagramme
de classe automatiquement
. Réalisez un test en Java de votre architecture, en vous inspirant du code de
test qui vérifie quelques points simples de l'architecture de l'application `SuperCanard` :
+
.Test du patron _Strategy_ sur les `Canard` en Ruby (source link:src/java/TD1/checkModel.rb[ici])
[source,ruby]
----------
include::src/java/TD1/checkModel.rb[lines=8..200]
----------

:numbered!:
[appendix]
== Pour aller plus loin

Reprenez les section "pour aller plus loin" des TDs 1 et 2.

ifndef::compact[]
== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
