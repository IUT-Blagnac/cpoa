:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TP 1

:eleve:
:sourcedir: src/java/TD1

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://jmbruel.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1. Je sais programmer en {java}.
2. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
3. Je maîtrise les concepts objet de base (héritage, polymorphisme, ...).
4. J'ai réalisé le TD `SuperCanard` et donc connait le patron _Strategy_!
| {objtd}	| Comprendre ce qu'est une *conception* et implémenter mon premier patron.
| {duree}	| *2* TP de 1,5h (sur 2 semaines).
|======================

== Rappel sur le patron Stratégie

[[strategy]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Stratégie* (_Strategy_)
====
include::pattern/strategy.txt[]
====

== Reprise du TD

[NOTE]
=====
Les TPs sont prévus se dérouler sur {eclipse}, mais vous êtes libre
d'utiliser l'éditeur de votre choix.
=====

. Téléchargez le code de l'application `SuperCanardBof` existante link:TP1.zip[TP1.zip].
+
[TIP]
======
Attention quelques étapes sont nécessaires à l'utilisation de ces fichiers sous eclipse/Windows :

. Importer dans {eclipse} le projet (menu:File[Import... > Existing Projects into Worspace]
 et choisir `TP1.zip` que vous venez de télécharger.
. Positionner `Junit` dans le `Classpath`(btn:[Clic Droit] sur votre projet
menu:Properties[Java Build Path > Add Library] et choisir `Junit4`)
. Si Windows, dans la ligne suivante de `SuperCanardTest`, il faut remplacer
les deux points de l'option `-cp` par un point virgule :
+
[source,java]
-------
executionProgrammeATester = Runtime.getRuntime().exec("java -cp .;./bin "+programmeATester);
-------
======
. Lancez l'application elle-même pour vérifier que tout fonctionne.
. Regardez le programme de test fonctionnel `SuperCanardTest` qui vérifie de
manière automatique que tout fonctionne comme on le faisait en MPA.
. Regardez le programme de test fonctionnel `SuperCanardTest2` qui vérifie de
manière automatique que tout fonctionne, mais d'une manière plus proche des
tests unitaires.
. Implémentez rapidement le patron _Strategy_ comme préparé en TD en modifiant
le code en conséquence.
. Rejouez les tests pour vérifier que tout fonctionne toujours.

== Jeu d'aventure

=== Bases

. En utilisant le patron _Strategy_, et en utilisant l'organisation en
paquetage donnée en <<setArme,fin de TP>>), implémentez les classes et comportements du jeu d'aventure
du TD1 (section 2.7.2) et dont voici les bases :
+
.Un jeu d'aventure minimaliste
image::aventure.png[link="images/aventure.png"]

=== Améliorations

On souhaite maintenant obliger les concepteurs de tout nouveau `Personnage` à
implémenter systématiquement à l'instanciation le comportement d'arme.

. Proposez une solution à ce problème
+
TIP: il est tout à fait légal de créer un constructeur pour une classe abstraite...
+
. Implémentez cette solution en modifiant votre application
. Testez d'ajouter une nouvelle classe de `Personnage` qui n'implémente pas le comportement
et vérifiez que ça ne passe pas la compilation.

=== Utilisation du comportement dynamique

On souhaite pleinement bénéficier du changement possible de comportement
à l'exécution.

. Réalisez une application qui, à partir d'un menu, permet de créér
un personnage parmis les types possibles, et de lui affecter une arme.
. Vérifiez qu'en changeant d'arme, le comportement change.

:numbered!:
[appendix]
[[setArme]]

== Exemple d'organisation en paquetages

Le principe est d'avoir :

- un _package_ pour les classes métiers (e.g., `Canard`,`Colvert`, etc.)
- un autre pour les comportements (1 par type de comportement en fait)
- dans chaque comportement avoir l'interface, puis un _package_ spécifique
aux implémentations (`impl`).

Ce qui donne pour l'application `SuperCanard` :

[source,shell]
-------
        ├── appli
        │   ├── Canard.java
        │   ├── CanardEnPlastique.java
        │   ├── Colvert.java
        │   ├── Leurre.java
        │   ├── Main.java
        │   └── Mandarin.java
        └── comportements
            ├── cancaner
            │   ├── ComportementCancan.java
            │   └── impl
            │       ├── CanardMuet.java
            │       ├── Cancan.java
            │       └── Coincoin.java
            └── voler
                ├── ComportementVol.java
                └── impl
                    ├── NePasVoler.java
                    └── VolerAvecDesAiles.java
-------

[appendix]
== Pour aller plus loin

. Testez les limites de votre implémentation (par exemple avez-vous pensé à
  ce qui se passe si quelqu'un fait un `new Chevalier(null,null)` ?).
. Vous pouvez imaginer une application graphique :-)
. Repérez la partie de votre application principale qui fait le lien entre une arme
donnée et le comportement à affecter au personnage. Comment pourrait-on améliorer cette
"correspondance"?
. À propos de `SuperCanardTest2` :
- c'est intéressant pour les méthodes qui produisent des lignes sur la sortie standard
- ça reste du test unitaire qui se rapproche du test fonctionnel
parce que l'on réécris le `main()` dans les fonctions de test
- les méthodes produisent des messages sur la sortie standard. Bien sûr il aurait
été préférable qu'elles retournent des `String`
+
[NOTE]
=====
Java n'est pas l'idéal pour faire du test fonctionnel.
Ce serait plus simple de faire les tests fonctionnels avec python ou ruby
car ils sont proches de l'OS et plus efficaces pour faire toute sorte de _parsing_
et de _matching_. Utiliser un autre langage
pour les tests fonctionnels illustre aussi clairement qu'il s'agit de se placer
à l'extérieur du programme testé.
=====

ifndef::compact[]
== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
