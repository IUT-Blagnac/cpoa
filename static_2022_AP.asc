== Retour sur les Membres `static`

ifndef::slides[:leveloffset: 0]

[source,java]
---------
class VariableDemo
{
  static int count=0;
  public static void incCount() {
    VariableDemo.count++;
  }
  public void increment() {
    count++;
  }
  public static void main(String args[]) {
    VariableDemo obj1=new VariableDemo();
    VariableDemo obj2=new VariableDemo();
    obj1.increment();
    obj2.increment();
    VariableDemo.incCount();
    System.out.println("VariableDemo: count is="+VariableDemo.count);
    System.out.println("Obj1: count is="+obj1.count);
    System.out.println("Obj2: count is="+obj2.count);
  }
}
---------

Output:

..........
VariableDemo: count is=3
Obj1: count is=3
Obj2: count is=3
..........

Exemple à éviter ... ca marche ici car `count` est accessible.

ifdef::slides[:leveloffset: -1]

=== Membres `static` (suite)

Comment ça marche :

[%step]
- Les variables `static` sont initialisées au chargement de la classe.
- Les variables `static` d'une classe sont
initialisées avant que la moindre instance ne soit créée.
- Les variables `static` sont initialisées avant que la moindre méthode `static` ne s'exécute.

=== Accès aux membres `static`

Les membres static sont accessibles :

-   En les préfixant par le nom de la classe (ou par un objet de la classe mais rend le code confus).
-   Directement (sans les préfixer) dans le code de la classe.

ifdef::slides[:leveloffset: 0]
