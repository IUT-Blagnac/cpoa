
[[Observateur]]
== Observateur

ifdef::slides[:leveloffset: -1]

//.Crédit Photo :
image::observer.jpg[]

=== Motivation

//-------------- book
ifdef::backend-pdf[]
Comment s'assurer que quand une donnée est modifiée, tous ceux
qui l'utilisent en soient informés et réagissent en conséquence.
Il s'agit d'une situation très souvent rencontrée en informatique.
endif::backend-pdf[]
//--------------------

ifndef::slides[.L'illustration classique du patron _Observer_ (source <<Meyer>>)]
image::observer-illustration.png[]

=== Définition

include::pattern/observer.txt[]

=== Application

Le patron _Observer_ est utilisable dans de nombreuses situations :

[%step]
- Quand un concept a deux aspects, l'un dépendant de l'autre.
Encapsuler ces aspects dans des objets séparés permet de les utiliser
et les laisser évoluer de manière indépendante.
- Dès que le changement d'un objet entraîne le changement de plusieurs autres.
- Dès qu'un objet doit en notifier un certain nombre d'autres sans les connaitre.

[[observerJava]]
=== _Observer_ en Java

{Java} fournit des classes _Observable/Observer_ pour le patron _Observer_.
La classe `java.util.Observable` est la classe de base pour les sujets.
Ainsi, toute classe qui veut être observée étant cette classe dont
voici les caractéristiques :

- fournit des méthodes pour ajouter/enlever des  observateurs
- fournit des méthodes pour notifier les observateurs
- une sous-classe concrète doit seulement s'occuper de notifier à chque
méthode modifiant l'état des objets (_mutators_)
- utilise un vecteur stoquant les références des observateurs

L'interface `java.util.Observer` correspond aux observateurs
qui doivent implémenter cette interface.

ifdef::slides[:leveloffset: -1]

==== La classe java.util.Observable

Voici la liste des méthodes de `java.util.Observable` :

[source,java,linenum]
-----
public Observable()
public synchronized void addObserver(Observer o)
protected synchronized void setChanged()
public synchronized void deleteObserver(Observer o)
protected synchronized void clearChanged()
public synchronized boolean hasChanged()
public void notifyObservers(Object arg)
public void notifyObservers()
-----

==== L'interface java.util.Observer

[source,java,linenum]
.java.util.Observer
-----
/**
* This method is called whenever the observed object is changed. An
* application calls an observable object's notifyObservers method to have all
* the object's observers notified of the change.
*
* Parameters:
* o - the observable object
* arg - an argument passed to the notifyObservers method
*/
public abstract void update(Observable o, Object arg)
-----

ifdef::slides[:leveloffset: +2]
