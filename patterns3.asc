
== Point sur le TD Fabrique

ifdef::slides[:leveloffset: -1]

=== Principes de conception


[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Fabrique* (_Factory_)
====
include::pattern/fabrique.txt[]
====

=== Premier exemple d'utilisation de patron

ifndef::slides[.1er exemple d'utilisation de Fabrique]
image::pizzeria1.png[link="images/pizzeria1.png"]

ifdef::slides[=== Utilisation de patron (suite)]

ifndef::slides[.Exemple complet d'utilisation de Fabrique]
image::pizzeria.png[link="images/pizzeria.png"]

=== Autre exemple concret

.Factory en PHP (source http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns[ici])
[source,php]
--------
<?php
class DBFactory
{
  public static function load($sgbdr)
  {
    $classe = 'SGBDR_' . $sgbdr;

    if (file_exists($chemin = $classe . '.class.php'))
    {
      require $chemin;
      return new $classe;
    }
    else
    {
      throw new RuntimeException('La classe <strong>' . $classe . '</strong> n\'a pu être trouvée !');
    }
  }
}
?>
--------

ifdef::slides[=== Autre exemple concret (suite)]

.Factory en PHP (source http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns[ici])
[source,php]
--------
<?php
try
{
  $mysql = DBFactory::load('MySQL');
}
catch (RuntimeException $e)
{
  echo $e->getMessage();
}
?>
--------

ifdef::slides[:leveloffset: +1]

== Mais c'est pas fini!

Reprenons nos pizzas vues en link:TD3.html[TD]

ifndef::slides[.Une pizzeria dépendante]
image::pizzeria-dep.png[]

ifdef::slides[== Inversion des dépendances]

ifndef::slides[.Une pizzeria dépendante]
image::pizzeria.png[]

ifdef::slides[== Inversion des dépendances]

[%step]
- Aucune variable ne doit contenir une référence à une classe concrète.
- Aucune classe ne doit dériver d'une classe concrète.
- Aucune classe ne doit redéfinir une méthode implémentée dans une classe de base.


ifdef::slides[== Patron Fabrique]

ifndef::slides[.Une pizzeria avec Fabrique]
image::Pizzeria-sec.png[]

ifdef::slides[== Patron Fabrique]

.Problème de la dépendance des ingrédients
image::Pizzeria-sec1.png[]

ifdef::slides[== Patron Fabrique pour une famille de produits]

ifndef::slides[.Des cartes adaptées]
image::ingredients.png[]

ifdef::slides[== Fabrique d'ingrédients]

[source,java]
-----------
public interface FabriqueIngredientsPizza {
  public Pate creerPate ();
  public Sauce creerSauce();
  public Fromage creerFromage();
  public Legumes[] creerLegumes();
  public Poivrons creerPoivrons();
  public Moules creerMoules();
}
-----------

ifdef::slides[== Fabrique d'ingrédients (suite)]

[source,java]
-----------
public class FabriqueIngredientsPizzaBrest implements FabriqueIngredientsPizza {
  public Pate creerPate() {
    return new PateFine();
  }
  public Sauce creerSauce() {
    return new SauceMarinara();
  }
  ...
}
-----------

[source,java]
-----------
public class FabriqueIngredientsPizzaStrasbourg implements FabriqueIngredientsPizza {
  public Pate creerPate() {
    return new PateEpaisse();
  }
  public Sauce creerSauce() {
    return new SauceTomateCerise();
  }
  ...
}
-----------

ifdef::slides[== Fabrique d'ingrédients (utilisation)]

[source,java]
-----------
public class PizzaFromage extends Pizza {
  FabriqueIngredientsPizza fabriqueIngredients;

  public PizzaFromage(FabriqueIngredientsPizza fabriqueIngredients) {
    this.fabriqueIngredients = fabriqueIngredients;
  }
  void preparer() {
    System.out.println("Préparation de " + nom);
    pate = fabriqueIngredients.creerPate();
    sauce = fabriqueIngredients.creerSauce();
    fromage = fabriqueIngredients.creerFromage();
  }
}
-----------

== Fabrique abstraite

Nous sommes arrivé à une version du patron Fabrique appelée <<FabriqueAbstraite, Fabrique Abstraite>> :

include::pattern/fabrique-abstraite.txt[]

== Retour sur la machine à état UML

Reprenons la machine à état {UML} et essayons d'en implémenter une en {java}.

ifndef::slides[.Machine à état d'une pile]
image::stack.png[]

ifdef::slides[== Implémentation en mode Kata]

Nous allons implémenter cette pile en mode Kata.

WARNING: Mais avant ça, petite digression sur les Dojo Coding

== TP en mode Dojo

ifdef::slides[:leveloffset: -1]

=== Le principe

- Une personne (généralement le prof de TP) *initie l'exercice* en
ouvrant un {eclipse} et en *commençant par un test* qui commence
par échouer et qui "passera" quand la fonctionalité attendue sera implémentée et fonctionnelle.
- Il vérifie que son test échoue bien

TIP: On pourra avantageusement installer le plug-in eclipse
http://infinitest.github.io/[InfiniTest] qui permet de runner les tests à
chaque sauvegarde.

ifdef::slides[=== Le principe (suite)]

- Il fait en sorte que le test *passe au vert* le plus vite possible
- Il *refactor* éventuellement (faire passer le test au vert mais
  de façon intelligente, éviter la duplication de code, réorganiser
  les classes, etc.)
- Quand tout est au vert on passe à une fonctionnalité suivante

=== Les règles

- Toutes les 5 minutes (timer sonore) on change de personne aux commandes
  (au clavier/souris en l'occurence)
- Il faut un "maître du temps"
- Tout le monde participe au codage (et ne fait pas du code de son côté)
+
NOTE: Les machines ne sont donc pas utiles pour cette partie! Seule la machine
connectée au vidéoprojecteur est utilisée.
+
- Le volontariat c'est mieux, mais le prof est libre d'organiser le tour de rôle.
- En 90' on peut faire passer 18 personnes, donc tout le monde y passe et
le plus tôt est en général le moins compliqué.
- Merci à ceux qui ont déjà participé aux coding dojos de montrer l'exemple ;-)

ifdef::slides[:leveloffset: +1]

ifdef::slides[== Implémentation en mode Kata]

== Le distributeur de bonbons

ifndef::slides[.Machine à état d'un distributeur simple]
image::bonbons.png[]

ifdef::slides[:leveloffset: -1]

=== Implémentation intuitive

[source,java]
-----------
public void insererPiece() {
  if (etat == A_PIECE) {
    System.out.println("Vous ne pouvez plus insérer de pièces");
  } else if (etat == EPUISE) {
    System.out.println("Vous ne pouvez pas insérer de pièce, nous sommes en rupture de stock");
  } else if (etat == VENDU) {
    System.out.println("Veuillez patienter, le bonbon va tomber");
  } else if (etat == SANS_PIECE) {
    etat = A_PIECE;
    System.out.println("Vous avez inséré une pièce");
  }
}
-----------

=== Erreur d'implémentations

[%step]
- Ce code n'adhère pas au principe Ouvert-Fermé.
- Cette conception n'est pas orientée objet.
- Les transitions ne sont pas explicites. Elles sont enfouies au
milieu d'un tas d'instructions conditionnelles.
- Nous n'avons pas encapsulé ce qui varie.
- Les ajouts ultérieurs sont susceptibles de provoquer des bugs
dans le code.

=== Une meilleure implémentation

[%step]
. Définir une nouvelle interface `Etat` qui contiendra une méthode pour
chaque action
. Implémenter une classe pour chaque `Etat`. Elles seront responsable du comportement.
. Se débarrasser de toutes les instructions conditionnelles et les remplacer
par une délégation à la classe adéquate.

=== Illutration

Etape 1 :

ifndef::slides[.Inplémentation des états]
image::bonbons-dc.png[]

ifdef::slides[=== Illustration (suite)]

Etape 2

[source,java]
-----------
public class EtatSansPiece implements Etat {
  Distributeur distributeur;

  public EtatSansPiece(Distributeur distributeur) {
    this.distributeur = distributeur;
  }

  public void insererPiece() {
    System.out.println("Vous avez inséré une pièce");
    distributeur.setEtat(distributeur.getEtatAPiece());
  }
  ...
}
-----------

ifdef::slides[=== Illustration (suite)]

Etape 3

[source,java]
-----------
public class Distributeur {
  Etat etatEpuise;
  Etat etatSansPiece;
  Etat etatAPiece;
  Etat etatVendu;

  Etat etat = etatSansPiece;
  ...
  public void insererPiece() {
    etat.insererPiece();
  }
...
}
-----------

=== Le patron Etat

include::pattern/etat.txt[]



ifdef::slides[:leveloffset: +1]
