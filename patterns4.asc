
== Pour aller plus loin avec les patrons...

ifdef::slides[:leveloffset: -1]

//http://blogs.radiocanut.org/onestpasdescadeaux/2014/02/16/pour-aller-plus-loin-avec-les-non-mixites/
.Crédit photo : http://blogs.radiocanut.org/
image::plusloin.jpg[]

=== Partagez votre vocabulaire

[%step]
- Dans les réunions de conception (pas nécessairement avec le client)
- Avec les autres développeurs
- Dans la documentation de votre architecture
- Dans les commentaires du code et les conventions de nommage
- Dans les groupes/blogs de développeurs
- (pas pendant les exams!)

=== Ne foncez pas tête baissée

Quelques conseils :

[%step]
- Les patterns sont des *outils, non des règles*.
+
=> Rien n'empêche de les modifier et de les adapter à votre
problème.
+
- Ne visez l'extensibilité *que si la question se pose réellement* dans la pratique,
pas si elle est uniquement hypothétique.
- Ne vous emballez pas et *recherchez la simplicité*.
+
=> Si vous trouvez une solution plus simple que l'emploi d'un pattern, n'hésitez pas !
+
- éliminez ce qui n’est pas vraiment nécessaire.
+
=> N’ayez pas peur de *supprimer un design pattern inutile* de votre conception.

=== Les autres types de patrons

Il n'y a pas que les 3 types de patrons que l'on a vu :

[%step]
- De création
- Structurels
- Comportementaux
ifdef::slides[]
- des exemples?
+
[icon="{iconsdir}/tuxteacher.png"]
.*QUESTION*
[WARNING]
====
Un ou deux exemples de chaque?
====

endif::slides[]

ifdef::slides[=== Les autres types de patrons (suite)]

Il y a par exemple :

[%step]
- Les patrons d'architecture
- Les patrons d'application
- Les patrons de domaine
- Les patrons de processus
- Les patrons d'organisation
- Les patrons de conception d'interfaces utilisateur

=== Les anti-patrons

image::anti-patrons.jpg[scaledwidth=70%]

ifdef::slides[=== Les anti-patrons]

[%step]
- Des solutions souvent *appliquées à tort* à des problèmes récurrents
- Décrit comment partir d'un problème pour arriver à une *mauvaise solution*
- Vous dit *pourquoi* une mauvaise solution est attrayante
- Suggère d'autres patrons applicables pouvant fournir de meilleures solutions

=== Tous les patrons qu'on a pas vu

Il y en a beaucoup :

- Chaîne de responsabilité
- Commande
- Décorateur
- Façade
- Interprète
- Médiateur
- Mémento
- Monteur
- Patron de méthode
- Poids-mouche
- Pont
- Prototype

=== Principale utilisation des patrons : refactoring!

ifdef::backend-pdf[]
À l'{iut}, nous finissons ce module par un projet de quelques semaines
de _refactoring_. Cette activité est en effet une des principales utilisations
des patrons.
endif::backend-pdf[]

=> Les 2 prochaines semaines vous allez "refactorer" une application :

- en binôme
- en testant
- en documentant
- en justifiant
- en essayant pas à tout prix de caser le plus de patrons "au kilo"

ifdef::slides[:leveloffset: +1]
