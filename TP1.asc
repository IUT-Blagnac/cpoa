:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TP 1

:eleve:
:sourcedir: src/java/TD1

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://jmbruel.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1. Je sais programmer en {java}.
2. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
3. Je maîtrise les concepts objet de base (héritage, polymorphisme, ...).
4. J'ai réalisé le TD `SuperCanard`!
| {objtd}	| Comprendre ce qu'est une *conception*.
| {duree}	| *2* TP de 1,5h (sur 2 semaines).
|======================

== Rappel sur le patron Stratégie

[[strategy]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Stratégie* (_Strategy_)
====
include::pattern/strategy.txt[]
====

== Déroulement du TP

[NOTE]
=====
Les TPs sont prévus se dérouler sur {eclipse}, mais vous êtes libre
d'utiliser l'éditeur de votre choix.
=====

. Téléchargez le code de l'appication `SuperCanard` existante link:TP1.zip[ici].
. Lancez l'application elle-même pour vérifier que tout fonctionne.
. Ecrivez un jeu de tests `JUnit` pour vérifier de manière automatique que tout fonctionne.
. Implémentez le patron _Strategy_ comme préparé en TD, en implémentant l'organisation en
paquetage vue en cours (cf. <<setArme,fin de TP>>).
. Rejouez vos tests pour vérifier que tout fonctionne toujours.

== Amélioration

On souhaite maintenant obliger les concepteurs de tout nouveau `Canard` à
implémenter les deux comportements.

. Proposez une solution à ce problème
+
TIP: il est tout à fait légal de créer un constructeur pour une classe abstraite...
+
. Implémentez cette solution en modifiant votre application
. Testez d'ajouter une nouvelle classe de `Canard` qui n'implémente pas le vol
et vérifiez que ça ne passe pas la compilation.

== Utilisation du comportement dynamique

On souhaite pleinement bénéficier du changement possible de comportement
à l'exécution.

. Implémentez une méthode `setVol()` qui permette d'associer un comportement
de vol donné à un `Canard`.
. Réalisez un petit `main` de test à base de menu pour faire affecter à l'utilisateur
les comportements.
. On souhaite implémenter un nouveau comportement de vol révolutionnaire pour les
`Canard` : le vol en V. Dans ce type de vol, chaque `Canard` doit voler en fonction
de ses congénaires suivant l'algorithme ci-dessous. Implémentez une version
minimale (ne vous embettez pas avec une interface graphique, sauf si vous avez fini ;-)
de ce comportement.

.Exemple d'algorithme du vol en V
[source,C]
---------
if (rang == 0) // je suis le premier
	voler();
else // je dois me placer derrière le bon Canard
	if (canards[rang].exists()) // s'il y a déjà un compère
		volerADroite() // je me mets à sa droite
	else volerAGauche(); // sinon, je me mets à sa gauche
rang+=1;
---------

:numbered!:
[[setArme]]

== Exemple d'organisation en paquetages

Le principe est d'avoir :

- un _package_ pour les classes métiers (`Canard`,`Colvert`, etc.)
- un autre pour les comportements (1 par type de comportement en fait)
- dans chaque comportement avoir l'interface, puis un _package_ spécifique
aux implémentations (`impl`).

Ce qui donne :

[source,shell]
-------
        ├── appli
        │   ├── Canard.java
        │   ├── CanardEnPlastique.java
        │   ├── Colvert.java
        │   ├── Leurre.java
        │   ├── Main.java
        │   └── Mandarin.java
        └── comportements
            ├── cancaner
            │   ├── ComportementCancan.java
            │   └── impl
            │       ├── CanardMuet.java
            │       ├── Cancan.java
            │       └── Coincoin.java
            └── voler
                ├── ComportementVol.java
                └── impl
                    ├── NePasVoler.java
                    └── VolerAvecDesAiles.java
-------

//== Pour aller plus loin


ifndef::compact[]
== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
