== Coding Dojo

ifdef::slides[:leveloffset: -1]

=== Rappel des principes

ifndef::compact[]

TIP: Pour plus d'info sur le Coding Dojo : http://fr.wikipedia.org/wiki/Coding_Dojo
endif::compact[]

ifdef::slides[:leveloffset: -1]

==== Le principe :

. Le prof de TP (ou le/la gentil(le) étudiant(e) volontaire désintéressé(e)) initie l'exercice
en ouvrant un {eclipse} et en commençant un test qui commence par échouer et qui "passera" quand
la fonctionalité attendue sera implémentée et fonctionnelle.
. Il vérifie que son test échoue bien
ifndef::compact[]
+
TIP: On pourra avantageusement installer le plug-in eclipse
http://infinitest.github.io/[InfiniTest] qui permet de runner les tests à
chaque sauvegarde (cf. plus haut)
+
endif::compact[]
. Il fait en sorte que le test passe au vert  le plus vite possible
. Il "refactor" éventuellement (faire passer le test au vert mais de façon
	intelligente, éviter la duplication de code, réorganiser les classes, etc.)
. Quand tout est au vert on passe à une fonctionnalité suivante

==== Les règles

- Toutes les 5 minutes (timer sonore) on change de personne aux commandes
(au clavier/souris en l'occurence)
- Il faut un "maître du temps"
- Tout le monde participe au codage (et ne fait pas du code de son côté)
ifndef::compact[]
+
NOTE: Les machines ne sont donc pas utiles pour cette partie! Seule la machine
connectée au vidéoprojecteur est utilisée.
+
endif::compact[]
- Le volontariat c'est mieux, mais le prof est libre d'organiser le tour de rôle.
- En 90' de TP on peut faire passer 18 personnes, donc tout le monde y passe et
le plus tôt est en général le moins compliqué.
- Merci à ceux qui ont déjà participé aux coding dojos de montrer l'exemple ;-)

ifdef::slides[:leveloffset: -1]

=== Sujet du jour : Type Abstrait Pile

[TIP]
.Rappels
====
Opérations::
----
CréerPile :  -> Pile
estVide   :  Pile ->  Booléen
Empiler   :  Pile * Elément -> Pile
Dépiler   :  Pile -> Pile
Sommet	   :  Pile ->  Elément
----

Préconditions::
----
Sommet(p) valide Si et Seulement Si estVide(p) == FAUX
Dépiler(p) valide Si et Seulement Si estVide(p) == FAUX
----

Axiomes::
----
(1) estVide(CréerPile())
(2) estVide(Empiler(p,e)) == FAUX
(3) estVide(Dépiler(Empiler(p,e))) Si et Seulement Si estVide(p)
(4) Sommet(Empiler(p,e)) == e
(5) !estVide(p) => Sommet(Dépiler(Empiler(p,e))) == Sommet(p)
----
L’axiome suivant résume à lui seul les axiomes (3) et (5) :
----
Dépiler(Empiler(p,e)) == p
----
====

ifdef::slides[=== TAD Pile (suite)]

[CAUTION]
.Choix d'implémentation
====
Le type abstrait Pile sera implémenté en *java* en utilisant un
tableau de chaines de caractères.

Dans un premier temps, la taille du tableau sera de 10 éléments.

Conséquences::
- +empiler()+ ajoutera une chaine en sommet de pile
et +sommet()+ retournera une chaine

- la pile pourra être pleine
====

Pour l'architecture logicielle, le type abstrait Pile sera composé :

. d'une classe Pile fournissant un enregistrement de type Pile
. d'une classe PileOperations fournissant toutes les opérations du type Abstrait Pile

WARNING: Les étapes qui suivent ne sont pas complètement adaptées au
dojo car souvent les tests se font après coup, mais vous pourrez avoir
le code sous la main pour lancer les inspirations si elles ne viennent pas.

=== Étape 1 : Mise en place d'un enregistrement de type Pile

. Commencer par un test simple et le placer dans un fichier de nom *PileTest.java*.
Essayez de l'avoir en tête et de ne juste "ouvrir" un ficher déjà prêt. L'intérêt du coding
dojo, c'est de voir comment vous utiliser les raccourcis, les quickfix etc.
+
[source,java]
----
import junit.textui.TestRunner;
import junit.framework.TestSuite;
import junit.framework.TestCase;

public class PileTest extends TestCase {
	static int totalAssertions = 0;
	static int bilanAssertions = 0;

	/*
	Opérations du type Pile
	*/
	public void test_type_new_Pile() throws Exception {
		Pile pile = new Pile() ;

		totalAssertions++ ;
		assertEquals("new Pile() retourne une Pile", "Pile", pile.getClass().getName());
		bilanAssertions++ ;
	}

	/*
	Axiomes du type Pile
	*/

	/*
	Préconditions du type Pile
	*/

	/*
	main() de la classe de Test
	*/
	public static void main(String[] args) {
		junit.textui.TestRunner.run(new TestSuite(PileTest.class));
		if (bilanAssertions == totalAssertions) { System.out.print("Bravo !"); }
		System.out.println(" "+bilanAssertions+"/"+totalAssertions+" assertions vérifiées");
	} // fin main

} // fin PileTest
----

ifdef::slides[=== Etape 1 (suite)]

. Si vous utilisez SciTE au lieu de {eclipse}, pour compiler le programme de Test n'oubliez pas de placer les fichiers
*SciTE.properties* et *junit.jar* dans le répertoire de vos sources (avant d'ouvrir SciTE) ou
bien exécutez ceci :
+
----
javac -cp .;junit.jar PileTest.java
----

ifdef::slides[=== Etape 1 (suite)]

ifdef::prof[]
. Pour les encadrants voici un exemple complet de *Pile.java*
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
=====
[source,java]
.Pile.java
----
include::src/java/dojo/Pile.java[]
----
=====
+
Mais l'idée est d'y arriver progressivement. Par exemple :

+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
=====
[source,java]
.Pile.java (version `1.0`)
----
public class Pile {
}
----
=====
endif::prof[]


ifdef::slides[=== Etape 1 (suite)]

. Compléter la classe Pile pour qu'elle fournisse un enregistrement
possédant :

.. un champ *elements* de type String[] et de taille 100
.. un champ *indiceSommet* de type int, initialisé à -1
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
=====
[source,java]
.Pile.java (version `1.1`)
----
public class Pile {
	public String[] elements =  new String[100];
	public int indiceSommet = -1 ;
}
----
=====
endif::prof[]

=== Étape 2 : Mise en place des opérations du type abstrait Pile

. Créer un fichier *PileOperations.java* et y placer une classe *PileOperations*
contenant la fonction *empiler()* suivante :
+
[source,java]
----
public static Pile empiler(Pile pfPile, String pfElement) {
	return(pfPile);
}
----

ifdef::slides[=== Etape 2 (suite)]
. Compiler *Pile.java* puis vérifier que le test passe toujours

ifdef::slides[=== Etape 2 (suite)]
. Ajouter la fonction de test suivante à *PileTest.java*
+
[source,java]
.Seconde fonction de test
----
public void test_type_empiler() throws Exception {
	Pile pile = new Pile() ;

	totalAssertions++ ;
	assertEquals("empiler(pile,'XXX') retourne une Pile", "Pile", PileOperations.empiler(pile,"XXX").getClass().getName());
	bilanAssertions++ ;
}
----
+
Comprendre cette seconde fonction de test, compiler *PileTest.java* puis vérifier que les 2 tests passent.

ifdef::slides[=== Etape 2 (suite)]
. Ajouter la fonction de test suivante à *PileTest.java*
+
[source,java]
.Troisième fonction de test
----
public void test_type_depiler() throws Exception {
	Pile pile = new Pile() ;
	PileOperations.empiler(pile,"XXX") ;

	totalAssertions++ ;
	assertEquals("depiler(pile) retourne une Pile", "Pile", PileOperations.depiler(pile).getClass().getName());
	bilanAssertions++ ;
}
----
+
Comprendre cette troisième fonction de test
et compléter *PileOperations.java* pour que le troisième test passe.
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
=====
On doit disposer d'une opération +depiler()+ retournant la Pile

[source,java]
.PileOperations.java
----
public class PileOperations {
	public static Pile empiler(Pile pfPile, String pfElement) {
		return(pfPile);
	}
	public static Pile depiler(Pile pfPile) {
		return(pfPile);
	}
}
----
=====
endif::prof[]

ifdef::slides[=== Etape 2 (suite)]
. Ajouter la fonction de test suivante à *PileTest.java*
+
[source,java]
.Quatrième fonction de test
----
public void test_type_sommet() throws Exception {
	Pile pile = new Pile() ;
	PileOperations.empiler(pile,"XXX") ;

	totalAssertions++ ;
	assertEquals("sommet(pile) retourne une String", "java.lang.String", PileOperations.sommet(pile).getClass().getName());
	bilanAssertions++ ;
}
----
+
Comprendre cette quatrième fonction de test
et compléter LE MOINS POSSIBLE *PileOperations.java* pour que le quatrième test passe.
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
=====
On doit disposer d'une opération +sommet()+ retournant une chaine

[source,java]
.PileOperations.java
----
public class PileOperations {
	public static Pile empiler(Pile pfPile, String pfElement) {
		return(pfPile);
	}
	public static Pile depiler(Pile pfPile) {
		return(pfPile);
	}
	public static String sommet(pfPile){
		return("XXX");
	}
}
----
=====
endif::prof[]

NOTE: à ce stade, les opérations du type Pile respectent seulement la définition
des types requis et produits. Les opérations ne font pas encore ce qu'elle doivent faire. Patience ...

=== Étape 3 : Implémentation des axiomes du type abstrait Pile (si vous avez encore du temps)

L'implémentation *java* du type Pile utilise un tableau de chaines
et une variable indice indiquant le sommet actuel de la pile.

. Que doit contenir le tableau interne d'une Pile
à la suite des actions suivantes :
+
[source,java]
----
Pile p = new Pile();
PileOperations.empiler(p,"A");
PileOperations.empiler(p,"B");
PileOperations.depiler(p);
PileOperations.depiler(p);
----
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Réponse
=====
----
["A","B",?,?,?,...] car les éléments dépilés ne sont pas retirés
avec estVide(p) == true
et indiceSommet == -1 (indéfini)
----
=====
endif::prof[]

ifdef::slides[=== Etape 3 (suite)]
. Pourquoi le code précédent est-il equivalent à celui-ci :
+
[source,java]
----
Pile p = new Pile();
PileOperations.depiler(PileOperations.depiler(PileOperations.empiler(PileOperations.empiler(p,"A"),"B")));
----
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.Réponse
=====
empiler() et depiler() retournent la pile sur laquelle on peut continuer de jouer
=====
endif::prof[]

ifdef::slides[=== Etape 3 (suite)]
. Ajouter le code suivant à *PileTest.java*
+
[source,java]
.Test des axiomes du type abstrait Pile
----
public void XXXtest_axiome1() {
	Pile pile = new Pile() ;

	totalAssertions++ ;
	assertTrue("Une nouvelle pile est vide", PileOperations.estVide(pile));
	bilanAssertions++ ;
}

public void XXXtest_axiome2() throws Exception {
	Pile pile = new Pile() ;
	PileOperations.empiler(pile,"XXX") ;

	totalAssertions++ ;
	assertFalse("Apres empiler() : pile n'est pas vide", PileOperations.estVide(pile));
	bilanAssertions++ ;
}

public void XXXtest_axiome3() throws Exception {
	Pile pile = new Pile() ;
	PileOperations.empiler(pile,"XXX") ;
	PileOperations.depiler(pile) ;

	totalAssertions++ ;
	assertTrue("Apres empiler(), depiler() : pile est vide", PileOperations.estVide(pile));
	bilanAssertions++ ;
}

public void XXXtest_axiome4() throws Exception {
	Pile pile = new Pile() ;
	PileOperations.empiler(pile,"XXX") ;

	totalAssertions++ ;
	assertEquals("Apres empiler(pile,\"XXX\") : Sommet == \"XXX\"", "XXX", PileOperations.sommet(pile));
	bilanAssertions++ ;
}

public void XXXtest_axiome5() throws Exception {
	Pile pile = new Pile() ;
	PileOperations.empiler(pile,"000") ;
	PileOperations.empiler(pile,"XXX") ;
	PileOperations.depiler(pile) ;

	totalAssertions++ ;
	assertEquals("Apres empiler(pile,\"000\"), empiler(pile,\"XXX\"), depiler(pile) : Sommet == \"000\"", "000", PileOperations.sommet(pile));
	bilanAssertions++ ;
}

public void XXXtest_axiomes3et5() throws Exception {
	Pile pile = new Pile() ;
	PileOperations.depiler(PileOperations.empiler(PileOperations.empiler(pile,"000"),"XXX")) ;

	totalAssertions++ ;
	assertEquals("Apres empiler(pile,\"000\"), empiler(pile,\"XXX\"), depiler(pile) : Sommet == \"000\"", "000", PileOperations.sommet(pile));
	bilanAssertions++ ;

	PileOperations.depiler(pile) ;

	totalAssertions++ ;
	assertTrue("Apres depiler(pile) : pile est vide", PileOperations.estVide(pile));
	bilanAssertions++ ;
}
----
+
--

--

ifdef::slides[=== Etape 3 (suite)]
. POUR chaque fonction de test FAIRE
.. Activer la fonction en supprimant 'XXX'
.. Comprendre l'objectif
.. Modifier la classe PileOperations pour que le test passe
.. Compiler, tester
.. Retourner en c) autant que nécessaire
+
[NOTE]
.Indications
====
. *empiler()* incrémente le sommet de pile, puis insère le nouvel élément
à l'indice sommet de pile
. *depiler()* décrémente le sommet de pile
. *sommet()* retourne l'élément situé en sommet de pile
. Vous supposerez dans cet exercice que la pile n'est jamais pleine
====
ifdef::prof[]
+
[icon="{iconsdir}/example.png"]
[IMPORTANT]
.PileOperations.java
=====
[source,java]
----
public static Pile empiler(Pile pfPile, String pfElement) {
	pfPile.indiceSommet = pfPile.indiceSommet + 1 ;
	pfPile.elements[pfPile.indiceSommet] = pfElement ;
	return(pfPile);
}

public static Pile depiler(Pile pfPile){
	pfPile.indiceSommet = pfPile.indiceSommet - 1 ;
	return(pfPile);
}

public static String sommet(Pile pfPile) {
	return(pfPile.elements[pfPile.indiceSommet]);
}
----
=====
endif::prof[]

ifdef::slides[:leveloffset: +1]
