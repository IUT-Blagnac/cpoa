// ------------------------------------------
//  Created by Jean-Michel Bruel on 2014-11.
//  Copyright (c) 2014 IRIT/U. Toulouse. All rights reserved.
// ------------------------------------------
= Design patterns
ifndef::myasciidoconf[]
Jean-Michel Bruel (@jmbruel, jbruel@gmail.com)
v1.0, {localdate} - First draft
:experimental:
:numbered!:
:deckjs_theme: swiss
:status: bottom

include::asciidoc.conf[]

endif::myasciidoconf[]

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]

ifdef::inclusion[]
ifdef::slides[:leveloffset: -1]
endif::inclusion[]

:pattern-list:


== Introduction : importance des patrons

ifndef::slides[.Les patrons : des réponses éprouvées à des problèmes récurrents]
image::phdComics.png[]

== Point sur le TD de la semaine passée

ifdef::slides[:leveloffset: -1]

=== Principes de conception

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
[quote]
____________________________________________________________________
Identifiez les apsects de votre code qui varient et
séparez-les de ceux qui demeurent constant.
____________________________________________________________________
====

ifdef::slides[=== Principes de conception (suite)]

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
[quote]
____________________________________________________________________
Programmer une interface, non une implémentation.
____________________________________________________________________
====

ifdef::slides[=== Principes de conception (suite)]

[icon="{iconsdir}/yinyang.jpeg"]
[NOTE]
.Principe de conception
====
[quote]
____________________________________________________________________
Préférez la composition à l'héritage.
____________________________________________________________________
====

=== Premier patron

[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Stratégie* (_Strategy_)
====
include::pattern/strategy.txt[]
====

=== Premier exemple d'utilisation de patron

ifndef::slides[.Premier exemple d'utilisation de patron]
image::superCanardFinal.png[link="images/superCanardFinal.png"]

=== Autre exemple concret

NOTE: Cet exemple est tiré de
http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns[ce cours].

*Le problème*

Vous avez une classe `FileWriter` qui a pour rôle d'écrire dans un fichier
ainsi qu'une classe `DBWriter`. Dans un premier temps, ces classes ne
contiennent qu'une méthode `write()` qui n'écrira que le texte passé
en paramètre.

Au fil du temps, vous vous rendez compte que c'est dommage qu'elles ne
fassent que ça et vous aimeriez bien qu'elles puissent écrire en différents
formats (HTML, XML, etc.) : les classes doivent donc formater puis écrire.

ifdef::slides[=== Autre exemple concret (suite)]

*La solution*

ifndef::slides[.Application du pattern <<strategy>> (http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns[source])]
image::strategyWriter.png[link="http://openclassrooms.com/courses/programmez-en-oriente-objet-en-php/les-design-patterns"]

ifdef::slides[=== Autre exemple concret (suite)]

[icon="images/formater-icon.png"]
[NOTE]
====
.L'interface en `PHP` (code source link:src/php/Formater.php[ici])
[source,php]
------
include::src/php/Formater.php[]
------
====

ifdef::slides[=== Autre exemple concret (suite)]

[icon="images/writer-icon.png"]
[NOTE]
====
.La classe abstraite `Writer` (code source link:src/php/Writer.php[ici])
[source,php]
------
include::src/php/Writer.php[]
------
====

ifdef::slides[=== Autre exemple concret (suite)]

[icon="images/filewriter-icon.png"]
[NOTE]
====
.La classe `FileWriter` (code source link:src/php/FileWriter.php[ici])
[source,php]
------
include::src/php/FileWriter.php[]
------
====

ifdef::slides[=== Autre exemple concret (suite)]

[icon="images/dbwriter-icon.png"]
[NOTE]
====
.La classe `DBWriter` (code source link:src/php/DBWriter.php[ici])
[source,php]
------
include::src/php/DBWriter.php[]
------
====

ifdef::slides[=== Autre exemple concret (suite)]

Enfin, nous avons nos trois formateurs.
L'un ne fait rien de particulier (`TextFormater`),
et les deux autres formatent le texte en deux langages
différents (`HTMLFormater` et `XMLFormater`).

ifdef::slides[=== Autre exemple concret (suite)]

[icon="images/formaters-icon.png"]
[NOTE]
====
.La classe `TextFormater` (code source link:src/php/TextFormater.php[ici])
[source,php]
------
include::src/php/TextFormater.php[]
------

ifdef::slides[]
====

=== Autre exemple concret (suite)

[icon="images/formaters-icon.png"]
[NOTE]
====

endif::slides[]

.La classe `HTMLFormater` (code source link:src/php/HTMLFormater.php[ici])
[source,php]
------
include::src/php/HTMLFormater.php[]
------

ifdef::slides[]
====

=== Autre exemple concret (suite)

[icon="images/formaters-icon.png"]
[NOTE]
====

endif::slides[]

.La classe `XMLFormater` (code source link:src/php/XMLFormater.php[ici])
[source,php]
------
include::src/php/XMLFormater.php[]
------
====

=== (non) Réutilisation

WARNING: Les patrons *ne sont pas réutilisables*!

Il faut implémeter la solution qu'il représente à chaque fois.

ifdef::slides[=== Réutilisation (exception)]

Exception : certains font l'objet d'une librairie.

Par exemple le patron Singleton existe dans la bibliothèque standard du
langage  en {Ruby}.
C'est un mixin qu'il suffit d'inclure dans la classe qui doit être un singleton.

[source,ruby]
------
class Klass
   include Singleton
   # ...
end

a,b  = Klass.instance, Klass.instance

a == b
# => true

Klass.new
# => NoMethodError - new is private ...
------

ifdef::slides[:leveloffset: +1]

== Un peu d'histoire

1977::
  *Alexander* : patterns pour les architectures (les vraies)
1987::
  *Beck* et *Cunningham* : patterns pour des interfaces utilisateurs
1994::
  *Gamma*, Helm, Johnson et Vlissides : LE livre de référence (cf. <<GoF>>)
  NOTE:  Les patterns de ce livre sont connus comme les *Gof* pour « _Gang of Four_ ».
2004::
  *Craig Larman* décrit des modèles de conception : les Patterns *GRASP*

== Exemples de bons principes

*SOLID*:

- _**S**ingle Responsibility Principle_
- _**O**pen-Closed Principle_
- _**L**iskov Substitution Principle_
- _**I**nterface Segregation Principle_
- _**D**ependency Inversion Principle_

ifdef::slides[:leveloffset: -1]

=== _**S**ingle Responsibility Principle_

image::solid-s.jpg[]

.......
Responsabilité => Sujet à changement
.......

=== _**O**pen-Closed Principle_

image::solid-o.jpg[]

.......
Ouvert à l'extension mais fermé à la modification
.......

=== _**L**iskov Substitution Principle_

image::solid-l.jpg[]

.......
Une classe doit pouvoir être remplacée par une instance d'un de ses
sous-types, sans modifier la cohérence du programme
.......

=== _**I**nterface Segregation Principle_

image::solid-i.jpg[]

.......
Préférer plusieurs interfaces spécifiques pour chaque client plutôt qu'une
seule interface générale
.......

=== _**D**ependency Inversion Principle_

image::solid-d.jpg[]

.......
Il faut dépendre des abstractions, pas des implémentations
.......

ifdef::slides[:leveloffset: +1]

== GRASP


== Patrons à aborder

[%step]
* Ceux déjà pratiqués
** <<Singleton>>
** <<Observateur>>
** Fabrique (_factory_) (cf. parser sax)
* Les "pressentis"
- <<Stratégie>>
- Itérateur
- Composite
- Etat
- Proxy
* Les nouveaux
- Décorateur
- Commande
- Adaptateur
- Façade
- Patron de méthode
* Les "avancés"
- Chaînes de responsabilité
- Visiteur
* Ceux qu'on n'aura pas le temps d'aborder
- Prototype
- Mémento
- Médiateur
- Interprète
- Poids-mouche
- Monteur
- Pont
* Concepts avancés
- Patrons de patrons (exemple du MVC)
- Anti-patrons

[appendix]
:numbered!:
include::glossaire.txt[]

include::refs.txt[]

include::conventions.txt[]

include::creditPhoto.txt[]

ifdef::inclusion[]

ifdef::slides[:leveloffset: +1]

endif::inclusion[]
