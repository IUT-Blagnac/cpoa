:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TD 3

:eleve:
:prof:
:sourcedir: src/java/TD3

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://iut-blagnac.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1. Je sais programmer en {java}.
2. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
3. Je maîtrise les concepts objet de base (héritage, polymorphisme, ...).
4. J'ai compris ce qu'est un patron et j'ai grand soif d'en apprendre d'autres que
_Strategy_ et Singleton
| {objtd}	| Aborder le patron *fabrique*.
| {duree}	| *1* TD et *2* TP de 1,5h (sur 2 semaines).
|======================

// // | {depot}	| -

== Rappel du cours

TIP: N'hésitez pas à (re)lire régulièrement le {sitecours}.


== Problème du main de test du jeu d'aventure

Vous avez sûrement dans votre `main` de l'application de jeu d'aventure
une partie du code ressamblant à ceci :

.Adaptation des comportements à la situation
[source,java]
-----
		if (choix == "Epee") {
			perso.setArme(new ComportementEpee());
		}
		else if (choix == "Arc") {
			perso.setArme(new ComportementArc());
		else if ...
			...
		}
-----

Ce code est peu adaptatif et va soufrir des évolutions, par exemple :

- changement de la liste des armes possibles
- rajouter des `if then else` à chaque nouvelle arme
- suppression de certaines armes
- ...

//----------------------------- Question ------------------
.*QUESTION(s)*
[WARNING]
====
. Isoler ce code dans une classe `SimpleFabriqueArme` qui possèdera
une méthode `creerComportementArme(String type)` qui retourne le comportement
adapté en fonction du paramètre reçu.
. Donnez le diagramme de classe {UML} de la nouvelle organisation.
. Donnez le diagramme de séquence du main.
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
. Implémentation
+
.Extrait de FabriqueArme.java
[source,java]
-----
include::{sourcedir}/src/simuaventure/comportements/arme/impl/SimpleFabriqueArme.java[lines=12..25]
-----
+
. Diagramme de classe de la fabrique de comportements d'armes
+
image::fabriqueArme.png[]
+
. Diagramme de séquence du `main`. Par exemple avec le code de test suivant :
+
[source,java]
------
Chevalier perso = new Chevalier("JMI");

SimpleFabriqueArme fabrique = new SimpleFabriqueArme();

perso.setArme(fabrique.creerComportementArme("Epee"));
perso.frapper();
------
+
image::fabriqueArme-seq.svg[]

====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

Vous complèterez le code du jeu d'aventure en TP. Mais avant cela étudions le patron
_Factory_ sur une exemple complet.

== La pizzeria O'Reilly

Vous êtes embauché dans une pizzeria pour faire ... de l'informatique!

Soit le code de départ suivant :

[source,java]
------
include::src/java/Pizzeria/Pizzeria.java[]
------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Identifiez ce qui varie dans ce code (si la pression du marché fait
	ajouter des pizzas à la carte ou si une pizza n'a plus de succès et doit
	disparaître, etc.).
====

== Le patron Fabrique

[[Fabrique]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Fabrique*
====
include::pattern/fabrique.txt[]
====

.Quelques exemples de description du patron Fabrique
image::google-fabrique.png[link="images/google-fabrique.png"]

== Application au jeu d'aventure


:numbered!:
== Pour aller plus loin


//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
. Comment testeriez-vous la mise en oeuvre du patron <<Fabrique,Fabrique>>?
====

ifndef::compact[]
== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
