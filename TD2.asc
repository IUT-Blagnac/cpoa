:moduleTitle: CPOA
:authorDefault:  Dut/Info-S3/M3105
:tdnum: TD 2

:eleve:
:sourcedir: src/java/TD1

ifndef::definitions[]
include::definitions.txt[]
endif::definitions[]
ifndef::myasciidoconf[]
include::asciidoc.conf[]
endif::myasciidoconf[]

ifdef::eleve[]
:doctitle:  {moduleTitle} - Sujet {tdnum}
endif::eleve[]
ifdef::prof[]
:doctitle: {moduleTitle} - Support {tdnum}
endif::prof[]
ifdef::todoprof[]
:doctitle: {moduleTitle} - DEROULEMENT SEANCE PROF {tdnum}
endif::todoprof[]

:icons: font

= {doctitle}
:Author:  {authorDefault}
:lang: fr
:slideshowlocation: IUT Blagnac
:copyright: {date={localdate}}, {slideshowlocation} *** {author} *** Powered by AsciiDoc and W3C Slidy &#169;
:incremental:

// eleve : sujet pour élèves
// prof : support prof pour séance
// todoprof : support AVEC EXPLICATIOSN DEROULEMENT pour profs

//----------- définitions --------------
:sitecours: http://jmbruel.github.io/cpoa/[Support de Cours]
:pre: PreReq
:objtd: ObjTD
:duree: Durée
:depot: À rendre
:lien: Lien
:img: img

//-------------------- Warning si correction -----------
ifdef::prof[]
[CAUTION]
.Version corrigée
=====
Cette version comporte des indications pour les
réponses aux exercices.
=====
endif::prof[]

//-------------------- Cartouche d'en-tête -----------
[[cartouche]]
[align="left",cols="1,10",width="90%"]
|======================
| {pre}		|
1. Je sais programmer en {java}.
2. J'ai conscience qu'il faut réfléchir avant de se lancer dans le codage.
3. Je maîtrise les concepts objet de base (héritage, polymorphisme, ...).
4. J'ai compris ce qu'est un patron et j'ai grand soif d'en apprendre d'autres que
_Strategy_
| {objtd}	| Comprendre ce qu'est une *conception*.
| {duree}	| *1* TD et *2* TP de 1,5h (sur 2 semaines).
|======================

// // | {depot}	| -

== Rappel du cours

TIP: N'hésitez pas à (re)lire régulièrement le {sitecours}.

Dans ce TD nous allons travailler autour du patron `Singleton`.

== Application

Idée : Je ne veux qu'il n'y ait qu'une seule fenêtre de type d'édition.

=== Exemple de code d'accès à une base de données

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Que pensez-vous du code ci-dessus?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Un objet créé pour chaque accès!
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

=== Réflexion sur l'unicité des instances

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Trouvez des exemples de situations où il est important de n'avoir
qu'une seule instance d'une classe donnée?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Quelques exemples :

- accès unique à une base de données (on vient de le voir)
- objet "parent" d'une interface
- ...
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

=== Essayons de limiter la création d'une seule instance

==== Avec une variable de classe compteur

==== Avec une méthode getInstance()

==== En interdisant l'accès au constructeur

[source,java]
-----
public maClasse() {
	private MaClasse() {}
}
-----

=== Application à Chocobon


=== Problème de la solution précédente

Multithreading



== Le patron Singleton

[[singleton]]
[icon="{iconsdir}/pattern.jpeg"]
[NOTE]
.Design pattern : *Singleton*
====
include::pattern/singleton.txt[]
====

.Quelques exemples de description du patron Singleton
image::google-singleton.png[link="images/google-singleton.png"]

:numbered!:
== Pour aller plus loin

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Quelle est la différence entre un singleton et une variable globale?
====
//----------------------------------------------------- Correction -------------------------
ifdef::prof[]
[icon="{iconsdir}/solution.png"]
[IMPORTANT]
.Solution
====
Quelques éléments de solution :

- En {java} les variables globales sont des références statiques à des objets.
- Problème déjà vu de l'instanciation à la demande vs. au démarrage.
====
endif::prof[]
//----------------------------------------------------- fin Correction -------------------------

//----------------------------- Question ------------------
.*QUESTION*
[WARNING]
====
Comment testeriez-vous la mise en oeuvre du patron <<singleton,Singleton>>?
====

TIP: N'hésitez pas à consulter le site où j'ai tiré cet execice
http://thecodersbreakfast.net/index.php?post/2008/02/25/26-de-la-bonne-implementation-du-singleton-en-java[ici].

ifndef::compact[]
== About...

****************************************************************
Document réalisé par mailto:{email}[{author}] via  {asciidoctorlink} (version `{asciidoctor-version}`) de 'Dan Allen', lui même basé sur {asciidoc}.
Pour l'instant ce document est libre d'utilisation et géré par la 'Licence Creative Commons'.
image:88x31.png["Licence Creative
Commons",style="border-width:0",link="http://creativecommons.org/licenses/by-sa/3.0/"]
http://creativecommons.org/licenses/by-sa/3.0/[licence Creative Commons Paternité - Partage à l&#39;Identique 3.0 non transposé].
****************************************************************
endif::compact[]
