== Introduction

Ce cours porte sur la **C**onception et **P**rogrammation **O**bjet **A**vancée.

ifdef::slides[:leveloffset: -1]

=== Concepts objets

Vous avez appris (cf. M2103 et M2104) un certain nombre
de *concepts objets* :

[%step]
- Abstraction
- Encapsulation
- Héritage
- Polymorphisme

ifdef::slides[:leveloffset: -1]

ifdef::slides[]
==== Abstraction

Définition :

endif::slides[]

==== Abstraction

Définition (restrictive) :

[quote]
Une classe est une *abstraction* des
caractéristiques communes d'un ensemble d'objets.

ifdef::slides[]
==== Encapsulation

Définition :

endif::slides[]

==== Encapsulation

Définition (restrictive) :

[quote]
Dans la description d'un objet, le but de l'*encapsulation* est de masquer
les attributs et les méthodes, c'est à dire, la manière dont est réalisé le
comportement de l'objet.

ifdef::slides[]
==== Héritage

Définition :

endif::slides[]

==== Héritage

Définition (simpliste) :

[quote]
L'héritage est la transmission de caractéristiques à ses descendants.

La classe qui hérite dispose des méthodes et attributs de niveau `public` et
`protected` de sa classe mère.

ifdef::slides[]
==== Polymorphisme

Le nom de polymorphisme vient du grec :

endif::slides[]

==== Polymorphisme

Le nom de polymorphisme vient du grec :

[quote]
qui peut prendre plusieurs formes

[IMPORTANT]
====
L'héritage concerne les classes, le polymorphisme concerne les objets.
====

ifdef::slides[==== Polymorphisme (suite)]

On distingue généralement trois types de polymorphisme :

[%step]
- Le polymorphisme *ad hoc* (également surcharge ou en anglais overloading)
- Le polymorphisme *paramétrique* (également généricité ou en anglais template)
- Le polymorphisme *d'héritage* (également redéfinition, spécialisation ou en anglais overriding)

ifdef::slides[:leveloffset: -1]

===== Polymorphisme ad hoc

- Appelé aussi *surcharge*.
- Permet d'avoir des fonctions de même nom dans des classes sans aucun rapport entre elles.
- Permet de définir des opérateurs d'utilisation différente en fonction des paramètres.

===== Le polymorphisme paramétrique

Appelé aussi *généricité*.

[source,C]
----
int method(int,int);
int method(int);
int method(float,float);
----

===== Le polymorphisme d'héritage

- Appelé aussi *spécialisation* (ou redéfinition).
- Lié à la redéfinition des méthodes héritées.

ifdef::slides[:leveloffset: +2]


=== Objectifs de la conception objet
//http://www.regismedina.com/articles/fr/principes-avances-conception-objet/objectifs

On essaye d'éviter trois problèmes principaux du développement :

- la rigidité
- la fragilité
- l'immobilité

ifdef::slides[:leveloffset: -1]

==== La rigidité

Anticiper les évolutions susceptibles d'impacter l'application.

==== La fragilité

Eviter les erreurs provoquées par la modification d'une partie du code.

==== L'immobilité

Rendre moins difficile l'extraction d'une partie du code.

ifdef::slides[:leveloffset: +1]

=== Bonnes pratiques et patrons

Pour répondre aux problèmes ci-dessus, on va s'attaquer à diminuer les
*dépendances* et éviter l'"effet spaghetti".

Les qualités recherchées sont :

[%step]
- Robustesse : les changements n'introduisent pas de régressions.
- Extensibilité : il est facile d'ajouter de nouvelles fonctionnalités.
- Réutilisabilité : il est possible de réutiliser certaines parties de code pour construire d'autres applications.

ifdef::slides[=== Bonnes pratiques et patrons (suite)]

Nous allons apprendre des *bonnes pratiques* :

[%step]
- Identifier les aspects qui varient et les séparer des aspects constants
- Programmer une interface, non une implémentation
- Préférer la composition à l'héritage
- Les classes doivent être ouvertes à l'extension, mais fermées à la modification
- Dépendez d'abstractions. Ne dépendez pas de classes concrètes (inversion des dépendances)
- Ne parlez pas aux inconnus

ifdef::slides[=== Bonnes pratiques et patrons (suite)]

L'étape suivante consiste à apprendre les bonnes solutions de
conception, ce qu'on appelle les *patrons de conception*
(ou _design patterns_ en anglais).

=== Organisation du cours

[NOTE]
====
Rappel du rythme : 1 cours, 1 TD et 2 TPs par semaine. Pendant 8 semaines.
====

[%step]
- La première semaine est consacré au principe des patrons
de conception, en partant d'un exemple (cours en fin de semaine).
- Les 5 ou 6 suivantes sont consacrées à l'étude de certains patrons classiques.
Mise en pratique sur des exercices en TP.
+
[NOTE]
====
Les TPs sont décalés d'une semaine (conception et étude d'un ou
plusieurs patrons semaine `N` et mise en oeuvre en TP semaine `N+1`).
====
+
- Les 2 ou 3 suivantes, les étudiants en mode projet pour faire du
_refactoring_ d'applications réelles (conception aidée en TD sur
les modèles {UML}, mise en oeuvre en TP).

ifdef::slides[=== Organisation (suite)]

Voici une proposition de déroulement des semaines :

Semaine 1::
  SuperCanard, le grand classique, <<Stratégie>>
Semaine 2::
* <<Singleton>>
Semaine 3::
Patrons <<Fabrique>>, <<Proxy>>, <<Etat>>
Semaine 4::
* <<Observateur>>
** version intuitive (2 interfaces)
** version Java (classe `Observable`)
Semaine 5::
  L'exemple de Meyer : menus en objet
Semaine 6::
  - Patrons Décorateur, Façade, Visiteur
  - MVC avec l'exemple `JTable` de {java}
  - Patrons Chaîne de responsabilité (juste en cours)
Semaines 7 et 8::
  * Quelques idées de projet final :
  ** Refactorer un code généré par {umple}.
  ** Refactorer le code de MPA (mais pas le leur, celui d'un autre groupe)

=== Evaluation et notation

Comme prévu par le http://webetud2.iut-blagnac.fr/pluginfile.php/1653/mod_resource/content/4/Contr%C3%B4les-2014-2015_S3.pdf[planning des contrôles],
les étudiants auront :

- une note de projet (TPs + projet final) => coef. 1
- une note d'examen final (semaine 5) => coef. 2

ifdef::slides[:leveloffset: 0]
